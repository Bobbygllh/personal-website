import { Instrumentation } from '../interfaces';
export declare const enum LogLevel {
    Basic = 0,
    Full = 1
}
export type RequestMetadata = {
    requestId?: string;
    activityDuration?: number;
    activityId?: string;
    errorCount?: number;
    responseStatus?: number;
};
export declare class PerformanceObservability {
    private readonly _instr;
    private readonly _skipUrls;
    private readonly _logPerformanceActivityName?;
    private readonly _hasPerf;
    private readonly _hasWindow;
    private readonly _boundObserverCallback;
    private readonly _boundNavigationTimingEventCallback;
    private readonly _setTimeoutNavigationCallback;
    private readonly _visibilityChangeNavigationCallback;
    private readonly _fuzzyMapper;
    private readonly _logLevel;
    private _resourceObserver;
    private _isStarted;
    private _processedNavigationTiming;
    constructor(_instr: Instrumentation, fuzzyMapRange: number, _skipUrls: (string | RegExp)[], _logPerformanceActivityName?: string, logLevel?: string);
    get isStarted(): boolean;
    get logLevel(): LogLevel;
    start(): void;
    stop(): void;
    private _addNavigationListeners;
    private _removeNavigationListeners;
    addEntry(absoluteUrl: string, perfTime: number, data: RequestMetadata): void;
    private _resourceEntryToResourceTiming;
    private _shouldInclude;
    private _logActivity;
    private _logNavigationEntries;
    private _logPerformanceEntries;
}
