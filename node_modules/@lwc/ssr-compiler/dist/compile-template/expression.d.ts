import type { ComplexExpression as IrComplexExpression, Expression as IrExpression } from '@lwc/template-compiler';
import type { Expression as EsExpression } from 'estree';
import type { TransformerContext } from './types';
export declare function expressionIrToEs(node: IrExpression | IrComplexExpression, cxt: TransformerContext): EsExpression;
/**
 * Given an expression in a context, return an expression that may be scoped to that context.
 * For example, for the expression `foo`, it will typically be `instance.foo`, but if we're
 * inside a `for:each` block then the `foo` variable may refer to the scoped `foo`,
 * e.g. `<template for:each={foos} for:item="foo">`
 * @param expression
 * @param cxt
 */
export declare function getScopedExpression(expression: IrExpression, cxt: TransformerContext): EsExpression;
//# sourceMappingURL=expression.d.ts.map