import type { TransformerContext } from './types';
import type { Attribute as IrAttribute, Node as IrNode, Property as IrProperty } from '@lwc/template-compiler';
import type { Expression as EsExpression, ObjectExpression as EsObjectExpression, Statement as EsStatement } from 'estree';
import type { ComplexExpression as IrComplexExpression, Expression as IrExpression, Literal as IrLiteral } from '@lwc/template-compiler';
export declare function optimizeAdjacentYieldStmts(statements: EsStatement[]): EsStatement[];
export declare function bAttributeValue(node: IrNode, attrName: string): EsExpression;
export declare function normalizeClassAttributeValue(value: string): string;
export declare function getChildAttrsOrProps(attrs: (IrAttribute | IrProperty)[], cxt: TransformerContext): EsObjectExpression;
/**
 * Determine if the provided node is of type Literal
 * @param node
 */
export declare function isLiteral(node: IrLiteral | IrExpression | IrComplexExpression): node is IrLiteral;
//# sourceMappingURL=shared.d.ts.map