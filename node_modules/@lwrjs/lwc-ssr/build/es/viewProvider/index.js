import BaseViewProvider from '@lwrjs/base-view-provider';
import { descriptions, LwrApplicationError, LwrError, stringifyError } from '@lwrjs/diagnostics';
import { ViewSpan, getTracer } from '@lwrjs/instrumentation';
import { createHeadMarkup, hashContent, isSpecifier, moduleSpecifierToKebabCase, slugify, } from '@lwrjs/shared-utils';
import { getRenderer } from '../renderer.js';
export default class LwcViewProvider extends BaseViewProvider {
    name = 'ssr-view-provider';
    moduleBundler;
    resourceRegistry;
    routes;
    runtimeEnvironment;
    config;
    constructor(_pluginConfig, providerConfig) {
        super();
        this.moduleBundler = providerConfig.moduleBundler;
        this.resourceRegistry = providerConfig.resourceRegistry;
        this.routes = [...providerConfig.config.routes, ...providerConfig.config.errorRoutes];
        this.runtimeEnvironment = providerConfig.runtimeEnvironment;
        this.config = providerConfig.config;
    }
    async initialize() {
        return;
    }
    async getView(viewId) {
        // This view provider creates content templates with islands from LWC component specifiers
        const specifier = viewId.contentTemplate?.component;
        if (!specifier || !isSpecifier(specifier)) {
            return;
        }
        const viewProperties = { serverHeadMarkup: '' }; // filled in by getServerData
        return {
            name: specifier,
            slug: slugify(specifier),
            ownHash: hashContent(specifier),
            originalSource: specifier,
            filePath: specifier,
            viewId,
            properties: viewProperties,
            render: async (context, runtimeEnvironment) => {
                // SSR the root component (without passing any public properties)
                const { config, moduleBundler, resourceRegistry } = this;
                const element = moduleSpecifierToKebabCase(specifier);
                return getTracer().trace({
                    name: ViewSpan.RenderPage,
                    attributes: { specifier },
                }, async () => {
                    try {
                        const route = this.routes.find((r) => r.id === viewId.id);
                        if (!route) {
                            throw new Error(`Unable to resolve configuration for view: ${viewId.id}`);
                        }
                        const { results = {}, bundles } = await getRenderer(config, moduleBundler, resourceRegistry).render({ [specifier]: { specifier, props: {} } }, route, runtimeEnvironment, context.runtimeParams, undefined, 
                        // lets the renderer know this is the first of 2-pass SSR
                        true);
                        // Insert the SSRed HTML into the document
                        const { html, props, markup, cache, warnings } = results[specifier] || {};
                        if (!html) {
                            throw new Error('Failed to render content template component');
                        }
                        if (markup)
                            viewProperties.serverHeadMarkup = createHeadMarkup([markup]); // generate <head> markup
                        return {
                            // add "lwc:external" to the contentTemplate component to mark it as already processed
                            renderedView: html.replace(`<${element}`, `<${element} lwc:external`),
                            metadata: {
                                serverData: props,
                                customElements: [],
                                assetReferences: [],
                                serverBundles: bundles,
                                serverDebug: { warnings },
                            },
                            cache,
                        };
                    }
                    catch (e) {
                        if (e instanceof LwrError)
                            throw e;
                        throw new LwrApplicationError(descriptions.APPLICATION.SSR_ERROR(specifier, stringifyError(e)));
                    }
                });
            },
        };
    }
}
//# sourceMappingURL=index.js.map