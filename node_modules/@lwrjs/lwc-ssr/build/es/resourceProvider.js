import path from 'path';
import { rollup } from 'rollup';
import { nodeResolve } from '@rollup/plugin-node-resolve';
import terser from '@rollup/plugin-terser';
import { LWC_VERSION } from '@lwrjs/config';
import { BundleSpan, getTracer } from '@lwrjs/instrumentation';
import { rootPath } from '@lwrjs/lwc-ssr/package';
import { createIntegrityHash } from '@lwrjs/shared-utils';
/**
 * Provide an IIFE script resource containing @lwc/ssr-client-utils#register-lwc-style.js
 * This script performs style de-duping for components which are SSR compiled.
 * It must be included in the <head> section of every page which uses the SSR compiler.
 * If the script is not included, only the first instance of each SSRed component will be styled!
 * The @lwc/ssr-client-utils package is a peer dependency so LWR is not tied to an LWC version.
 */
const banner = `/**
* Copyright (c) 2025, salesforce.com, inc.
* All rights reserved.
* SPDX-License-Identifier: MIT
* For full license text, see the LICENSE file in the repo root or https://opensource.org/licenses/MIT
*/
/* LWC SSR Client Utils v${LWC_VERSION} */`;
export default class SsrResourceProvider {
    name = 'lwc-ssr-client-utils';
    ssrUtilsName = 'register-lwc-style.js';
    versionCache = new Map();
    context;
    constructor(_config, context) {
        this.context = context;
    }
    async getResource(resource, environment) {
        // validate identifier
        const { specifier, version = LWC_VERSION } = resource;
        if (specifier !== this.ssrUtilsName || version !== LWC_VERSION) {
            return;
        }
        // check cache
        const cacheKey = `${specifier}_${version}`;
        if (this.versionCache.has(cacheKey)) {
            return this.versionCache.get(cacheKey);
        }
        // generate script resource
        const { output } = await getTracer().trace({
            name: BundleSpan.Rollup,
            attributes: { specifier },
        }, async () => {
            const bundler = await rollup({
                input: path.join(rootPath, 'build', 'scripts', specifier),
                plugins: [
                    nodeResolve({
                        // import from @lwc/ssr-client-utils
                        extensions: ['.js'],
                        modulesOnly: true,
                        modulePaths: ['node_modules/@lwc'],
                    }),
                    terser({
                        output: {
                            comments: (_, comment) => comment.value.includes('LWC SSR Client Utils'),
                        },
                    }),
                ],
            });
            return bundler.generate({ format: 'iife', banner });
        });
        // assemble resource definition
        const resourceDef = {
            specifier,
            version,
            type: 'application/javascript',
            inline: true,
            src: await this.context.resourceRegistry.resolveResourceUri({ specifier, version }, environment),
            content: output[0].code,
            integrity: createIntegrityHash(output[0].code),
        };
        // cache and return
        this.versionCache.set(cacheKey, resourceDef);
        return resourceDef;
    }
}
//# sourceMappingURL=resourceProvider.js.map