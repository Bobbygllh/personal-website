import type { ClientBootstrapConfig, EnvironmentContext, NormalizedLwrAppBootstrapConfig, NormalizedLwrErrorRoute, NormalizedLwrRoute, ProviderAppConfig, PublicResourceRegistry, RenderedViewMetadata, RuntimeEnvironment, RuntimeParams, ServerData } from '@lwrjs/types';
interface ServerEnvironment extends EnvironmentContext {
    SSR: boolean;
}
export declare const SSR_PROPS_ATTR = "data-lwr-props-id";
export declare function getPropsId(): string;
export declare function getRenderTimeout(): number;
export declare function getLoaderShim(resourceRegistry: PublicResourceRegistry, runtimeEnvironment: RuntimeEnvironment, bootstrapConfig: NormalizedLwrAppBootstrapConfig): Promise<string>;
export declare function getLoaderId(config: ClientBootstrapConfig, bootstrapConfig: NormalizedLwrAppBootstrapConfig): string;
export declare function getLoaderConfig(bootstrapModule: string, config: ProviderAppConfig, runtimeParams: RuntimeParams, serverData: ServerData): ClientBootstrapConfig & {
    env: ServerEnvironment;
};
export declare function getServerBootstrapServices(route: NormalizedLwrRoute | NormalizedLwrErrorRoute): string[];
export declare function mergeWarnings(metadata: RenderedViewMetadata, warnings?: (Error | string)[]): void;
export {};
//# sourceMappingURL=utils.d.ts.map