var __create = Object.create;
var __defProp = Object.defineProperty;
var __getProtoOf = Object.getPrototypeOf;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __markAsModule = (target) => __defProp(target, "__esModule", {value: true});
var __export = (target, all) => {
  for (var name in all)
    __defProp(target, name, {get: all[name], enumerable: true});
};
var __exportStar = (target, module2, desc) => {
  if (module2 && typeof module2 === "object" || typeof module2 === "function") {
    for (let key of __getOwnPropNames(module2))
      if (!__hasOwnProp.call(target, key) && key !== "default")
        __defProp(target, key, {get: () => module2[key], enumerable: !(desc = __getOwnPropDesc(module2, key)) || desc.enumerable});
  }
  return target;
};
var __toModule = (module2) => {
  return __exportStar(__markAsModule(__defProp(module2 != null ? __create(__getProtoOf(module2)) : {}, "default", module2 && module2.__esModule && "default" in module2 ? {get: () => module2.default, enumerable: true} : {value: module2, enumerable: true})), module2);
};

// packages/@lwrjs/lwc-ssr/src/dataViewTransformer/index.ts
__markAsModule(exports);
__export(exports, {
  default: () => preloadDataViewTransformer
});
var import_diagnostics = __toModule(require("@lwrjs/diagnostics"));
var import_instrumentation = __toModule(require("@lwrjs/instrumentation"));
var import_shared_utils = __toModule(require("@lwrjs/shared-utils"));
var import_utils = __toModule(require("../utils.cjs"));
var import_renderer = __toModule(require("../renderer.cjs"));
var NAME = "preload-data-transformer";
function preloadDataViewTransformer(_options, {config, moduleBundler, resourceRegistry}) {
  const routes = [...config.routes, ...config.errorRoutes];
  return {
    name: NAME,
    async link(stringBuilder, viewContext, metadata) {
      const allBundles = new Set([...metadata.serverBundles ?? []]);
      const {rootComponent} = viewContext.view;
      if (!rootComponent || !viewContext.view.bootstrap?.preloadData || viewContext.view.bootstrap?.ssr) {
        return {};
      }
      import_diagnostics.logger.debug({label: NAME, message: `Preload data for root component "${rootComponent}"`});
      const {
        results = {},
        warnings,
        bundles
      } = await (0, import_instrumentation.getTracer)().trace({
        name: import_instrumentation.ViewSpan.PreloadData,
        attributes: {rootComponent}
      }, async () => {
        const route = routes.find((r) => r.id === viewContext.view.id);
        if (!route) {
          throw new Error(`Unable to resolve configuration for view: ${viewContext.view.id}`);
        }
        try {
          return await (0, import_renderer.getRenderer)(config, moduleBundler, resourceRegistry).render({[rootComponent]: {specifier: rootComponent, props: {}}}, route, viewContext.runtimeEnvironment, viewContext.runtimeParams);
        } catch (e) {
          if (e instanceof import_diagnostics.LwrStatusError)
            throw e;
          const message = import_diagnostics.descriptions.APPLICATION.PRELOAD_DATA_ERROR(rootComponent, (0, import_diagnostics.stringifyError)(e));
          import_diagnostics.logger.warn({label: "preloadDataViewTransformer", message});
          return {warnings: [message]};
        }
      });
      (0, import_utils.mergeWarnings)(metadata, warnings);
      const result = results[rootComponent];
      if (!result) {
        return {};
      }
      const {props, markup, cache: {ttl} = {ttl: void 0}} = result || {};
      import_diagnostics.logger.verbose({label: NAME, message: "response", additionalInfo: props});
      markup && (0, import_shared_utils.addHeadMarkup)([result.markup], stringBuilder);
      metadata.serverData = metadata.serverData || {};
      Object.assign(metadata.serverData, props);
      metadata.serverBundles = bundles ? new Set([...allBundles, ...bundles]) : allBundles;
      return {cache: {ttl}};
    }
  };
}
