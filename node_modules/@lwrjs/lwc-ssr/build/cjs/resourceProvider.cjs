var __create = Object.create;
var __defProp = Object.defineProperty;
var __getProtoOf = Object.getPrototypeOf;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __markAsModule = (target) => __defProp(target, "__esModule", {value: true});
var __export = (target, all) => {
  for (var name in all)
    __defProp(target, name, {get: all[name], enumerable: true});
};
var __exportStar = (target, module2, desc) => {
  if (module2 && typeof module2 === "object" || typeof module2 === "function") {
    for (let key of __getOwnPropNames(module2))
      if (!__hasOwnProp.call(target, key) && key !== "default")
        __defProp(target, key, {get: () => module2[key], enumerable: !(desc = __getOwnPropDesc(module2, key)) || desc.enumerable});
  }
  return target;
};
var __toModule = (module2) => {
  return __exportStar(__markAsModule(__defProp(module2 != null ? __create(__getProtoOf(module2)) : {}, "default", module2 && module2.__esModule && "default" in module2 ? {get: () => module2.default, enumerable: true} : {value: module2, enumerable: true})), module2);
};

// packages/@lwrjs/lwc-ssr/src/resourceProvider.ts
__markAsModule(exports);
__export(exports, {
  default: () => resourceProvider_default
});
var import_path = __toModule(require("path"));
var import_rollup = __toModule(require("rollup"));
var import_plugin_node_resolve = __toModule(require("@rollup/plugin-node-resolve"));
var import_plugin_terser = __toModule(require("@rollup/plugin-terser"));
var import_config = __toModule(require("@lwrjs/config"));
var import_instrumentation = __toModule(require("@lwrjs/instrumentation"));
var import_package = __toModule(require("@lwrjs/lwc-ssr/package"));
var import_shared_utils = __toModule(require("@lwrjs/shared-utils"));
var banner = `/**
* Copyright (c) 2025, salesforce.com, inc.
* All rights reserved.
* SPDX-License-Identifier: MIT
* For full license text, see the LICENSE file in the repo root or https://opensource.org/licenses/MIT
*/
/* LWC SSR Client Utils v${import_config.LWC_VERSION} */`;
var SsrResourceProvider = class {
  constructor(_config, context) {
    this.name = "lwc-ssr-client-utils";
    this.ssrUtilsName = "register-lwc-style.js";
    this.versionCache = new Map();
    this.context = context;
  }
  async getResource(resource, environment) {
    const {specifier, version = import_config.LWC_VERSION} = resource;
    if (specifier !== this.ssrUtilsName || version !== import_config.LWC_VERSION) {
      return;
    }
    const cacheKey = `${specifier}_${version}`;
    if (this.versionCache.has(cacheKey)) {
      return this.versionCache.get(cacheKey);
    }
    const {output} = await (0, import_instrumentation.getTracer)().trace({
      name: import_instrumentation.BundleSpan.Rollup,
      attributes: {specifier}
    }, async () => {
      const bundler = await (0, import_rollup.rollup)({
        input: import_path.default.join(import_package.rootPath, "build", "scripts", specifier),
        plugins: [
          (0, import_plugin_node_resolve.nodeResolve)({
            extensions: [".js"],
            modulesOnly: true,
            modulePaths: ["node_modules/@lwc"]
          }),
          (0, import_plugin_terser.default)({
            output: {
              comments: (_, comment) => comment.value.includes("LWC SSR Client Utils")
            }
          })
        ]
      });
      return bundler.generate({format: "iife", banner});
    });
    const resourceDef = {
      specifier,
      version,
      type: "application/javascript",
      inline: true,
      src: await this.context.resourceRegistry.resolveResourceUri({specifier, version}, environment),
      content: output[0].code,
      integrity: (0, import_shared_utils.createIntegrityHash)(output[0].code)
    };
    this.versionCache.set(cacheKey, resourceDef);
    return resourceDef;
  }
};
var resourceProvider_default = SsrResourceProvider;
