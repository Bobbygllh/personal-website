var __create = Object.create;
var __defProp = Object.defineProperty;
var __getProtoOf = Object.getPrototypeOf;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __markAsModule = (target) => __defProp(target, "__esModule", {value: true});
var __export = (target, all) => {
  for (var name in all)
    __defProp(target, name, {get: all[name], enumerable: true});
};
var __exportStar = (target, module2, desc) => {
  if (module2 && typeof module2 === "object" || typeof module2 === "function") {
    for (let key of __getOwnPropNames(module2))
      if (!__hasOwnProp.call(target, key) && key !== "default")
        __defProp(target, key, {get: () => module2[key], enumerable: !(desc = __getOwnPropDesc(module2, key)) || desc.enumerable});
  }
  return target;
};
var __toModule = (module2) => {
  return __exportStar(__markAsModule(__defProp(module2 != null ? __create(__getProtoOf(module2)) : {}, "default", module2 && module2.__esModule && "default" in module2 ? {get: () => module2.default, enumerable: true} : {value: module2, enumerable: true})), module2);
};

// packages/@lwrjs/lwc-ssr/src/utils.ts
__markAsModule(exports);
__export(exports, {
  SSR_PROPS_ATTR: () => SSR_PROPS_ATTR,
  getLoaderConfig: () => getLoaderConfig,
  getLoaderId: () => getLoaderId,
  getLoaderShim: () => getLoaderShim,
  getPropsId: () => getPropsId,
  getRenderTimeout: () => getRenderTimeout,
  getServerBootstrapServices: () => getServerBootstrapServices,
  mergeWarnings: () => mergeWarnings
});
var import_shared_utils = __toModule(require("@lwrjs/shared-utils"));
var DEFAULT_SSR_TIMEOUT = 5e3;
var SSR_PROPS_ATTR = "data-lwr-props-id";
function getPropsId() {
  return `lwcprops${Math.floor(Math.random() * 65536).toString(16)}`;
}
function getRenderTimeout() {
  const override = process.env.SSR_TIMEOUT;
  return override ? Number.parseInt(override) : DEFAULT_SSR_TIMEOUT;
}
async function getLoaderShim(resourceRegistry, runtimeEnvironment, bootstrapConfig) {
  const {debug} = runtimeEnvironment;
  const useDebug = debug && !(0, import_shared_utils.isLambdaEnv)();
  const specifier = (0, import_shared_utils.getFeatureFlags)().LEGACY_LOADER ? useDebug ? "lwr-loader-shim-legacy.bundle.js" : "lwr-loader-shim-legacy.bundle.min.js" : useDebug ? "lwr-loader-shim.bundle.js" : "lwr-loader-shim.bundle.min.js";
  const resource = await resourceRegistry.getResource({specifier, version: bootstrapConfig.lwrVersion}, runtimeEnvironment, {ignoreDebug: !useDebug});
  if (!resource?.content && !resource?.stream) {
    throw new Error("Failed to find the loader shim");
  }
  let result = "";
  if (resource.content) {
    result = resource.content;
  } else {
    const stream = resource.stream();
    for await (const chunk of stream) {
      result += chunk;
    }
  }
  result += `
//# sourceURL=${resource.entry}`;
  return result;
}
function getLoaderId(config, bootstrapConfig) {
  if (config.requiredModules) {
    const id = config.requiredModules.find((specifier) => specifier.startsWith("lwr/loader"));
    if (id) {
      return id;
    }
  }
  const version = (0, import_shared_utils.normalizeVersionToUri)(bootstrapConfig.lwrVersion);
  return (0, import_shared_utils.getFeatureFlags)().LEGACY_LOADER ? `lwr/loaderLegacy/v/${version}` : `lwr/loader/v/${version}`;
}
function getLoaderConfig(bootstrapModule, config, runtimeParams, serverData) {
  return Object.assign({}, {
    bootstrapModule,
    serverData,
    autoBoot: false,
    disableInitDefer: true,
    rootComponents: [],
    endpoints: {
      uris: {
        mapping: `/1/mapping/amd/1/l/${runtimeParams.locale ?? config.i18n.defaultLocale}/mp/`
      }
    },
    env: {
      ...(0, import_shared_utils.buildEnvironmentContext)(runtimeParams),
      SSR: true
    }
  }, (0, import_shared_utils.getFeatureFlags)().LEGACY_LOADER ? {
    baseUrl: "ssr"
  } : {
    baseUrl: "/",
    imports: {
      "any/thing.js": ["any/thing"]
    }
  });
}
function getServerBootstrapServices(route) {
  return route.bootstrap.services.reduce((acc, service) => {
    if (service.ssr === true) {
      const serviceId = (0, import_shared_utils.getSpecifier)({specifier: service.name, version: service.version});
      acc.push(serviceId);
    }
    return acc;
  }, []);
}
function mergeWarnings(metadata, warnings = []) {
  if (!warnings.length)
    return;
  if (!metadata.serverDebug) {
    metadata.serverDebug = {};
  }
  metadata.serverDebug.warnings = metadata.serverDebug.warnings || [];
  metadata.serverDebug.warnings.push(...warnings);
}
