var __create = Object.create;
var __defProp = Object.defineProperty;
var __getProtoOf = Object.getPrototypeOf;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __markAsModule = (target) => __defProp(target, "__esModule", {value: true});
var __export = (target, all) => {
  for (var name in all)
    __defProp(target, name, {get: all[name], enumerable: true});
};
var __exportStar = (target, module2, desc) => {
  if (module2 && typeof module2 === "object" || typeof module2 === "function") {
    for (let key of __getOwnPropNames(module2))
      if (!__hasOwnProp.call(target, key) && key !== "default")
        __defProp(target, key, {get: () => module2[key], enumerable: !(desc = __getOwnPropDesc(module2, key)) || desc.enumerable});
  }
  return target;
};
var __toModule = (module2) => {
  return __exportStar(__markAsModule(__defProp(module2 != null ? __create(__getProtoOf(module2)) : {}, "default", module2 && module2.__esModule && "default" in module2 ? {get: () => module2.default, enumerable: true} : {value: module2, enumerable: true})), module2);
};

// packages/@lwrjs/lwc-ssr/src/viewProvider/index.ts
__markAsModule(exports);
__export(exports, {
  default: () => viewProvider_default
});
var import_base_view_provider = __toModule(require("@lwrjs/base-view-provider"));
var import_diagnostics = __toModule(require("@lwrjs/diagnostics"));
var import_instrumentation = __toModule(require("@lwrjs/instrumentation"));
var import_shared_utils = __toModule(require("@lwrjs/shared-utils"));
var import_renderer = __toModule(require("../renderer.cjs"));
var LwcViewProvider = class extends import_base_view_provider.default {
  constructor(_pluginConfig, providerConfig) {
    super();
    this.name = "ssr-view-provider";
    this.moduleBundler = providerConfig.moduleBundler;
    this.resourceRegistry = providerConfig.resourceRegistry;
    this.routes = [...providerConfig.config.routes, ...providerConfig.config.errorRoutes];
    this.runtimeEnvironment = providerConfig.runtimeEnvironment;
    this.config = providerConfig.config;
  }
  async initialize() {
    return;
  }
  async getView(viewId) {
    const specifier = viewId.contentTemplate?.component;
    if (!specifier || !(0, import_shared_utils.isSpecifier)(specifier)) {
      return;
    }
    const viewProperties = {serverHeadMarkup: ""};
    return {
      name: specifier,
      slug: (0, import_shared_utils.slugify)(specifier),
      ownHash: (0, import_shared_utils.hashContent)(specifier),
      originalSource: specifier,
      filePath: specifier,
      viewId,
      properties: viewProperties,
      render: async (context, runtimeEnvironment) => {
        const {config, moduleBundler, resourceRegistry} = this;
        const element = (0, import_shared_utils.moduleSpecifierToKebabCase)(specifier);
        return (0, import_instrumentation.getTracer)().trace({
          name: import_instrumentation.ViewSpan.RenderPage,
          attributes: {specifier}
        }, async () => {
          try {
            const route = this.routes.find((r) => r.id === viewId.id);
            if (!route) {
              throw new Error(`Unable to resolve configuration for view: ${viewId.id}`);
            }
            const {results = {}, bundles} = await (0, import_renderer.getRenderer)(config, moduleBundler, resourceRegistry).render({[specifier]: {specifier, props: {}}}, route, runtimeEnvironment, context.runtimeParams, void 0, true);
            const {html, props, markup, cache, warnings} = results[specifier] || {};
            if (!html) {
              throw new Error("Failed to render content template component");
            }
            if (markup)
              viewProperties.serverHeadMarkup = (0, import_shared_utils.createHeadMarkup)([markup]);
            return {
              renderedView: html.replace(`<${element}`, `<${element} lwc:external`),
              metadata: {
                serverData: props,
                customElements: [],
                assetReferences: [],
                serverBundles: bundles,
                serverDebug: {warnings}
              },
              cache
            };
          } catch (e) {
            if (e instanceof import_diagnostics.LwrError)
              throw e;
            throw new import_diagnostics.LwrApplicationError(import_diagnostics.descriptions.APPLICATION.SSR_ERROR(specifier, (0, import_diagnostics.stringifyError)(e)));
          }
        });
      }
    };
  }
};
var viewProvider_default = LwcViewProvider;
