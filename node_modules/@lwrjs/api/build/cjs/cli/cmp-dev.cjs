var __create = Object.create;
var __defProp = Object.defineProperty;
var __getProtoOf = Object.getPrototypeOf;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __markAsModule = (target) => __defProp(target, "__esModule", {value: true});
var __export = (target, all) => {
  for (var name in all)
    __defProp(target, name, {get: all[name], enumerable: true});
};
var __exportStar = (target, module2, desc) => {
  if (module2 && typeof module2 === "object" || typeof module2 === "function") {
    for (let key of __getOwnPropNames(module2))
      if (!__hasOwnProp.call(target, key) && key !== "default")
        __defProp(target, key, {get: () => module2[key], enumerable: !(desc = __getOwnPropDesc(module2, key)) || desc.enumerable});
  }
  return target;
};
var __toModule = (module2) => {
  return __exportStar(__markAsModule(__defProp(module2 != null ? __create(__getProtoOf(module2)) : {}, "default", module2 && module2.__esModule && "default" in module2 ? {get: () => module2.default, enumerable: true} : {value: module2, enumerable: true})), module2);
};

// packages/@lwrjs/api/src/cli/cmp-dev.ts
__markAsModule(exports);
__export(exports, {
  cmpDev: () => cmpDev
});
var import_diagnostics = __toModule(require("@lwrjs/diagnostics"));
var import_shared_utils = __toModule(require("@lwrjs/shared-utils"));
async function cmpDev(options) {
  const {name, open} = options;
  try {
    const {createPreviewServer} = await Promise.resolve().then(() => __toModule(require("../localdev/preview-server.cjs")));
    const server = createPreviewServer(options);
    await server.listen(async ({port}) => {
      const url = `http://localhost:${port}`;
      import_diagnostics.logger.info(`Component preview available at: ${url}`);
      if (open !== false) {
        await (0, import_shared_utils.launch)(port, false, name ? `/${(0, import_shared_utils.moduleSpecifierToKebabCase)(name)}` : "");
      }
    });
    return server;
  } catch (error) {
    import_diagnostics.logger.error(error);
    process.exit(1);
  }
}
