var __create = Object.create;
var __defProp = Object.defineProperty;
var __getProtoOf = Object.getPrototypeOf;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __markAsModule = (target) => __defProp(target, "__esModule", {value: true});
var __export = (target, all) => {
  for (var name in all)
    __defProp(target, name, {get: all[name], enumerable: true});
};
var __exportStar = (target, module2, desc) => {
  if (module2 && typeof module2 === "object" || typeof module2 === "function") {
    for (let key of __getOwnPropNames(module2))
      if (!__hasOwnProp.call(target, key) && key !== "default")
        __defProp(target, key, {get: () => module2[key], enumerable: !(desc = __getOwnPropDesc(module2, key)) || desc.enumerable});
  }
  return target;
};
var __toModule = (module2) => {
  return __exportStar(__markAsModule(__defProp(module2 != null ? __create(__getProtoOf(module2)) : {}, "default", module2 && module2.__esModule && "default" in module2 ? {get: () => module2.default, enumerable: true} : {value: module2, enumerable: true})), module2);
};

// packages/@lwrjs/api/src/localdev/preview-server.ts
__markAsModule(exports);
__export(exports, {
  createPreviewServer: () => createPreviewServer
});
var import_fs = __toModule(require("fs"));
var import_url = __toModule(require("url"));
var import_path = __toModule(require("path"));
var import_core = __toModule(require("@lwrjs/core"));
var import_diagnostics = __toModule(require("@lwrjs/diagnostics"));
var import_meta = {};
function createPreviewServer(options) {
  const {rootDir, logLevel} = options;
  process.env.LWR_LOG_LEVEL = logLevel;
  const __dirname = (0, import_path.dirname)((0, import_url.fileURLToPath)(import_meta.url));
  const projectDir = process.cwd();
  const internalAppDir = (0, import_path.join)(__dirname, "..", "..", "preview");
  const providerDir = (0, import_path.join)(__dirname, "providers");
  const cacheDir = (0, import_path.join)(projectDir, "__lwr_cache__");
  if ((0, import_fs.existsSync)(cacheDir)) {
    import_diagnostics.logger.debug(`deleting pre-existing cache dir: ${cacheDir}`);
    (0, import_fs.rmSync)(cacheDir, {recursive: true, force: true});
  }
  const serverConfig = {
    ignoreLwrConfigFile: true,
    rootDir,
    serverMode: "dev",
    lwc: {
      modules: [
        {
          dir: (0, import_path.join)(internalAppDir, "modules")
        }
      ]
    },
    assets: [
      {
        alias: "assets",
        dir: (0, import_path.join)(internalAppDir, "assets"),
        urlPath: "/assets"
      }
    ],
    routes: [
      {
        id: "home",
        path: "/",
        rootComponent: "preview/app",
        layoutTemplate: (0, import_path.join)(internalAppDir, "layouts", "preview.njk"),
        bootstrap: {
          syntheticShadow: true
        }
      },
      {
        id: "preview",
        path: "/:specifier",
        rootComponent: "preview/component",
        layoutTemplate: (0, import_path.join)(internalAppDir, "layouts", "preview.njk"),
        routeHandler: (0, import_path.join)(internalAppDir, "handlers", "preview.ts"),
        bootstrap: {
          syntheticShadow: true
        }
      },
      {
        id: "performance",
        path: "/performance/:specifier",
        layoutTemplate: (0, import_path.join)(internalAppDir, "layouts", "performance.njk"),
        routeHandler: (0, import_path.join)(internalAppDir, "handlers", "performance.ts"),
        bootstrap: {
          syntheticShadow: true
        }
      },
      {
        id: "menu-items",
        path: "/api/menuItems",
        routeHandler: [
          (0, import_path.join)(internalAppDir, "handlers", "menu-api.ts"),
          {
            projectDir,
            namespacePaths: options?.namespacePaths
          }
        ]
      }
    ],
    moduleProviders: [
      "@lwrjs/app-service/moduleProvider",
      [(0, import_path.join)(providerDir, "root-lwc-module-provider.js"), {rootDir}],
      [(0, import_path.join)(providerDir, "sfdx-module-provider.js"), {namespacePaths: options?.namespacePaths}]
    ]
  };
  return (0, import_core.createServer)(serverConfig);
}
