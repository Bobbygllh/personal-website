var __create = Object.create;
var __defProp = Object.defineProperty;
var __getProtoOf = Object.getPrototypeOf;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __markAsModule = (target) => __defProp(target, "__esModule", {value: true});
var __export = (target, all) => {
  for (var name in all)
    __defProp(target, name, {get: all[name], enumerable: true});
};
var __exportStar = (target, module2, desc) => {
  if (module2 && typeof module2 === "object" || typeof module2 === "function") {
    for (let key of __getOwnPropNames(module2))
      if (!__hasOwnProp.call(target, key) && key !== "default")
        __defProp(target, key, {get: () => module2[key], enumerable: !(desc = __getOwnPropDesc(module2, key)) || desc.enumerable});
  }
  return target;
};
var __toModule = (module2) => {
  return __exportStar(__markAsModule(__defProp(module2 != null ? __create(__getProtoOf(module2)) : {}, "default", module2 && module2.__esModule && "default" in module2 ? {get: () => module2.default, enumerable: true} : {value: module2, enumerable: true})), module2);
};

// packages/@lwrjs/api/src/localdev/providers/root-lwc-module-provider.ts
__markAsModule(exports);
__export(exports, {
  default: () => root_lwc_module_provider_default
});
var import_lwc_module_provider = __toModule(require("@lwrjs/lwc-module-provider"));
var import_diagnostics = __toModule(require("@lwrjs/diagnostics"));
var RootLWCModuleProvider = class extends import_lwc_module_provider.default {
  constructor(options = {}, context) {
    super(options, context);
    this.name = "root-lwc-module-provider";
    this.rootDir = options.rootDir || context.config.rootDir;
  }
  async getModuleEntry(moduleId, runtimeParams) {
    if (moduleId.importer && !moduleId.importer.startsWith(this.rootDir)) {
      moduleId.importer = this.rootDir;
    }
    try {
      const entry = await super.getModuleEntry(moduleId, runtimeParams);
      return entry;
    } catch (error) {
      import_diagnostics.logger.verbose(`Couldn't resolve module '${moduleId.specifier} from ${this.rootDir}'.`, error);
    }
    return void 0;
  }
};
var root_lwc_module_provider_default = RootLWCModuleProvider;
