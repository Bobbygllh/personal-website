var __create = Object.create;
var __defProp = Object.defineProperty;
var __getProtoOf = Object.getPrototypeOf;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __markAsModule = (target) => __defProp(target, "__esModule", {value: true});
var __export = (target, all) => {
  for (var name in all)
    __defProp(target, name, {get: all[name], enumerable: true});
};
var __exportStar = (target, module2, desc) => {
  if (module2 && typeof module2 === "object" || typeof module2 === "function") {
    for (let key of __getOwnPropNames(module2))
      if (!__hasOwnProp.call(target, key) && key !== "default")
        __defProp(target, key, {get: () => module2[key], enumerable: !(desc = __getOwnPropDesc(module2, key)) || desc.enumerable});
  }
  return target;
};
var __toModule = (module2) => {
  return __exportStar(__markAsModule(__defProp(module2 != null ? __create(__getProtoOf(module2)) : {}, "default", module2 && module2.__esModule && "default" in module2 ? {get: () => module2.default, enumerable: true} : {value: module2, enumerable: true})), module2);
};

// packages/@lwrjs/api/src/localdev/providers/sfdx-module-provider.ts
__markAsModule(exports);
__export(exports, {
  default: () => sfdx_module_provider_default
});
var import_path = __toModule(require("path"));
var import_fs = __toModule(require("fs"));
var import_lwc_module_provider = __toModule(require("@lwrjs/lwc-module-provider"));
var import_shared_utils = __toModule(require("@lwrjs/shared-utils"));
var import_diagnostics = __toModule(require("@lwrjs/diagnostics"));
var SFDX_SCOPE = "c/";
var DEFAULT_MODULE_DIR = import_path.default.join(process.cwd(), "force-app", "main", "default", "lwc");
function resolveResource(name) {
  if (name.indexOf("#") > -1) {
    const [component, resource] = name.split("#");
    return {component, resource};
  }
  if (name.indexOf("/") > -1) {
    const [component, ...resource] = name.split("/");
    return {component, resource: resource.join("/")};
  }
  return {component: name, resource: void 0};
}
var SFDXProvider = class extends import_lwc_module_provider.default {
  constructor(options, context) {
    super(options, context);
    this.name = "sfdx-module-provider";
    this.namespacePaths = options.namespacePaths && options.namespacePaths.length > 0 ? options.namespacePaths : [DEFAULT_MODULE_DIR];
  }
  async getModuleEntry({specifier}) {
    if (!specifier.startsWith(SFDX_SCOPE)) {
      return void 0;
    }
    const {name} = (0, import_shared_utils.explodeSpecifier)(specifier);
    const {component, resource} = resolveResource(name);
    const parentDir = this.namespacePaths.find((namespacePath) => {
      if (!import_fs.default.existsSync(import_path.default.join(namespacePath, component))) {
        return false;
      }
      return true;
    });
    if (!parentDir) {
      import_diagnostics.logger.warn({
        label: `local-dev`,
        message: `Missing source files for module '${specifier}' in the configured package directories`
      }, {
        packageDirectories: this.namespacePaths
      });
      return void 0;
    }
    return {
      id: specifier,
      specifier,
      entry: import_path.default.join(parentDir, component, resource ?? `${component}.js`),
      version: "",
      scope: process.cwd()
    };
  }
};
var sfdx_module_provider_default = SFDXProvider;
