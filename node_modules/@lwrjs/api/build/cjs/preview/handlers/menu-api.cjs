var __create = Object.create;
var __defProp = Object.defineProperty;
var __getProtoOf = Object.getPrototypeOf;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __markAsModule = (target) => __defProp(target, "__esModule", {value: true});
var __export = (target, all) => {
  for (var name in all)
    __defProp(target, name, {get: all[name], enumerable: true});
};
var __exportStar = (target, module2, desc) => {
  if (module2 && typeof module2 === "object" || typeof module2 === "function") {
    for (let key of __getOwnPropNames(module2))
      if (!__hasOwnProp.call(target, key) && key !== "default")
        __defProp(target, key, {get: () => module2[key], enumerable: !(desc = __getOwnPropDesc(module2, key)) || desc.enumerable});
  }
  return target;
};
var __toModule = (module2) => {
  return __exportStar(__markAsModule(__defProp(module2 != null ? __create(__getProtoOf(module2)) : {}, "default", module2 && module2.__esModule && "default" in module2 ? {get: () => module2.default, enumerable: true} : {value: module2, enumerable: true})), module2);
};

// packages/@lwrjs/api/src/preview/handlers/menu-api.ts
__markAsModule(exports);
__export(exports, {
  default: () => menuItemHandler
});
var import_shared_utils = __toModule(require("@lwrjs/shared-utils"));
var import_fs = __toModule(require("fs"));
var import_path = __toModule(require("path"));
var import_xml2js = __toModule(require("xml2js"));
async function getComponentPaths(namespacePath) {
  const children = await import_fs.default.promises.readdir(namespacePath, {withFileTypes: true});
  return children.filter((child) => child.isDirectory()).map((child) => import_path.default.join(child.parentPath, child.name));
}
async function getComponentMetadata(dirname) {
  const componentName = import_path.default.basename(dirname);
  const metaXmlPath = import_path.default.join(dirname, `${componentName}.js-meta.xml`);
  if (!import_fs.default.existsSync(metaXmlPath)) {
    return void 0;
  }
  const xmlContent = await import_fs.default.promises.readFile(metaXmlPath, "utf8");
  const parsedData = await (0, import_xml2js.parseStringPromise)(xmlContent);
  if (!isLwcMetadata(parsedData)) {
    return void 0;
  }
  if (parsedData.LightningComponentBundle) {
    parsedData.LightningComponentBundle.masterLabel = normalizeMetaProperty(parsedData.LightningComponentBundle.masterLabel);
    parsedData.LightningComponentBundle.description = normalizeMetaProperty(parsedData.LightningComponentBundle.description);
  }
  return parsedData;
}
function isLwcMetadata(obj) {
  return (obj && typeof obj === "object" && "LightningComponentBundle" in obj) === true;
}
function normalizeMetaProperty(prop) {
  if (!prop || typeof prop === "string") {
    return prop;
  }
  if (Array.isArray(prop) && prop.length > 0) {
    return prop[0];
  }
  return void 0;
}
function componentNameToTitleCase(componentName) {
  if (!componentName) {
    return "";
  }
  return componentName.replace(/([A-Z])/g, " $1").replace(/^./, (str) => str.toUpperCase());
}
async function menuItemHandler(viewRequest, ctx, options) {
  const {namespacePaths} = options;
  const componentPaths = (await Promise.all(namespacePaths.map((namespacePath) => getComponentPaths(namespacePath)))).flat();
  const items = (await Promise.all(componentPaths.map(async (componentPath) => {
    const xml = await getComponentMetadata(componentPath);
    if (!xml) {
      return void 0;
    }
    const name = import_path.default.basename(componentPath);
    const specifier = `c/${name}`;
    const href = "/" + (0, import_shared_utils.moduleSpecifierToKebabCase)(specifier);
    const label = componentNameToTitleCase(name);
    return {
      name,
      specifier,
      href,
      label: xml.LightningComponentBundle.masterLabel ?? label,
      description: xml.LightningComponentBundle.description ?? ""
    };
  }))).filter((component) => !!component);
  return {
    status: 200,
    body: {
      items
    },
    headers: {
      "content-type": "application/json"
    }
  };
}
