import type { AbstractModuleId, ModuleEntry, ProviderContext, RuntimeParams } from '@lwrjs/types';
import LWCModuleProvider, { LwcModuleProviderOptions } from '@lwrjs/lwc-module-provider';
export interface RootLWCModuleProviderOptions extends LwcModuleProviderOptions {
    rootDir?: string;
}
/**
 * A module provider that forces resolution relative to the root directory
 *
 * @remark
 * In the context of an SFDX project for local dev, all NPM packages are available at the root of the CLI.
 * This causes issues when LWC attempts to resolve NPM module records(eg. base components) from the current
 * SFDX project scope or current working directory.
 *
 * @example
 * When resolving the following module entry:
 * { specifier: 'lightning/button' importer: '<sfdx-project>/lwc/customButton' }
 * `lightning/button` is not available in the SFDX project; rather, it is provided by the CLI.
 *
 * Importer will be overriden to find NPM packages relative to the CLI root
 * { specifier: 'lightning/button' importer: '<sf-cli>/<lightning-plugin>' }
 */
export default class RootLWCModuleProvider extends LWCModuleProvider {
    name: string;
    constructor(options: RootLWCModuleProviderOptions | undefined, context: ProviderContext);
    getModuleEntry<T extends AbstractModuleId>(moduleId: T, runtimeParams: RuntimeParams): Promise<ModuleEntry | undefined>;
}
//# sourceMappingURL=root-lwc-module-provider.d.ts.map