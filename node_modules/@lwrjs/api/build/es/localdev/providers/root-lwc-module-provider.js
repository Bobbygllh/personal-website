import LWCModuleProvider from '@lwrjs/lwc-module-provider';
import { logger } from '@lwrjs/diagnostics';
/**
 * A module provider that forces resolution relative to the root directory
 *
 * @remark
 * In the context of an SFDX project for local dev, all NPM packages are available at the root of the CLI.
 * This causes issues when LWC attempts to resolve NPM module records(eg. base components) from the current
 * SFDX project scope or current working directory.
 *
 * @example
 * When resolving the following module entry:
 * { specifier: 'lightning/button' importer: '<sfdx-project>/lwc/customButton' }
 * `lightning/button` is not available in the SFDX project; rather, it is provided by the CLI.
 *
 * Importer will be overriden to find NPM packages relative to the CLI root
 * { specifier: 'lightning/button' importer: '<sf-cli>/<lightning-plugin>' }
 */
export default class RootLWCModuleProvider extends LWCModuleProvider {
    name = 'root-lwc-module-provider';
    constructor(options = {}, context) {
        super(options, context);
        this.rootDir = options.rootDir || context.config.rootDir;
    }
    async getModuleEntry(moduleId, runtimeParams) {
        // force resolution from the root directory
        if (moduleId.importer && !moduleId.importer.startsWith(this.rootDir)) {
            moduleId.importer = this.rootDir;
        }
        try {
            const entry = await super.getModuleEntry(moduleId, runtimeParams);
            return entry;
        }
        catch (error) {
            logger.verbose(`Couldn't resolve module '${moduleId.specifier} from ${this.rootDir}'.`, error);
        }
        // fallthrough if the module is not found relative to the root
        return undefined;
    }
}
//# sourceMappingURL=root-lwc-module-provider.js.map