import { moduleSpecifierToKebabCase } from '@lwrjs/shared-utils';
import type { HandlerContext, RouteHandlerViewResponse, ViewRequest } from '@lwrjs/types';
import fs from 'fs';
import path from 'path';
import { parseStringPromise } from 'xml2js';

export interface MenuHandlerOptions {
    projectDir: string;
    namespacePaths: string[];
}

interface LwcMetadata {
    LightningComponentBundle: {
        description?: string;
        masterLabel?: string;
    };
}

async function getComponentPaths(namespacePath: string): Promise<string[]> {
    const children = await fs.promises.readdir(namespacePath, { withFileTypes: true });

    return children
        .filter((child) => child.isDirectory())
        .map((child) => path.join(child.parentPath, child.name));
}

async function getComponentMetadata(dirname: string): Promise<LwcMetadata | undefined> {
    const componentName = path.basename(dirname);
    const metaXmlPath = path.join(dirname, `${componentName}.js-meta.xml`);
    if (!fs.existsSync(metaXmlPath)) {
        return undefined;
    }

    const xmlContent = await fs.promises.readFile(metaXmlPath, 'utf8');
    const parsedData = (await parseStringPromise(xmlContent)) as LwcMetadata;
    if (!isLwcMetadata(parsedData)) {
        return undefined;
    }

    if (parsedData.LightningComponentBundle) {
        parsedData.LightningComponentBundle.masterLabel = normalizeMetaProperty(
            parsedData.LightningComponentBundle.masterLabel,
        );
        parsedData.LightningComponentBundle.description = normalizeMetaProperty(
            parsedData.LightningComponentBundle.description,
        );
    }

    return parsedData;
}

function isLwcMetadata(obj: unknown): obj is LwcMetadata {
    return (obj && typeof obj === 'object' && 'LightningComponentBundle' in obj) === true;
}

function normalizeMetaProperty(prop: string[] | string | undefined): string | undefined {
    if (!prop || typeof prop === 'string') {
        return prop;
    }

    if (Array.isArray(prop) && prop.length > 0) {
        return prop[0];
    }

    return undefined;
}

function componentNameToTitleCase(componentName: string): string {
    if (!componentName) {
        return '';
    }

    return componentName.replace(/([A-Z])/g, ' $1').replace(/^./, (str) => str.toUpperCase());
}

export default async function menuItemHandler(
    viewRequest: ViewRequest,
    ctx: HandlerContext,
    options: MenuHandlerOptions,
): Promise<RouteHandlerViewResponse> {
    const { namespacePaths } = options;

    const componentPaths = (
        await Promise.all(namespacePaths.map((namespacePath) => getComponentPaths(namespacePath)))
    ).flat();

    const items = (
        await Promise.all(
            componentPaths.map(async (componentPath) => {
                const xml = await getComponentMetadata(componentPath);
                if (!xml) {
                    return undefined;
                }

                const name = path.basename(componentPath);
                const specifier = `c/${name}`;
                const href = '/' + moduleSpecifierToKebabCase(specifier);
                const label = componentNameToTitleCase(name);

                return {
                    name,
                    specifier,
                    href,
                    label: xml.LightningComponentBundle.masterLabel ?? label,
                    description: xml.LightningComponentBundle.description ?? '',
                };
            }),
        )
    ).filter((component) => !!component);

    return {
        status: 200,
        body: {
            items,
        },
        headers: {
            'content-type': 'application/json',
        },
    };
}
