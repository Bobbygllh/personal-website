/// <reference types="node" />
export declare function isNodeError(error: unknown): error is NodeJS.ErrnoException;
export declare class LwrError extends Error {
    name: string;
}
export declare class LwrServerError extends LwrError {
    name: string;
}
export declare class LwrApplicationError extends LwrError {
    name: string;
}
export declare class LwrInvalidError extends LwrError {
    name: string;
}
export declare class LwrUnresolvableError extends LwrError {
    name: string;
    type: string;
    constructor(message: undefined | string, type: string);
}
export declare class LwrStatusError extends LwrError {
    name: string;
    status: 301 | 302 | 429 | 503;
    headers?: Record<string, string>;
    constructor(message: undefined | string, status: 301 | 302 | 429 | 503, headers?: Record<string, string>);
}
type Position = {
    line: number;
    column: number;
};
export type DiagnosticLocation = {
    sourceText?: string;
    start?: Position;
    end?: Position;
};
export type Diagnostic = {
    description: string;
    location?: DiagnosticLocation;
};
export declare class DiagnosticsError extends LwrError {
    constructor(message: undefined | string, diagnostics?: Diagnostic[]);
    diagnostics: Diagnostic[];
}
export declare class LwrConfigError extends DiagnosticsError {
    name: string;
}
export {};
//# sourceMappingURL=errors.d.ts.map