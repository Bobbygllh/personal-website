// The NodeJS Error is different from the JavaScript Error (e.g. NodeJS Error has a code)
export function isNodeError(error) {
    return error instanceof Error;
}
// LWR-Node base error class from which all others extend
export class LwrError extends Error {
    name = 'LwrError';
}
// 500 - All errors which are instances of Error or LwrServerError will impact availability metrics
export class LwrServerError extends LwrError {
    name = 'LwrServerError';
}
// 500 - app layer does not affect availability
export class LwrApplicationError extends LwrError {
    name = 'LwrApplicationError';
}
// 400
export class LwrInvalidError extends LwrError {
    name = 'LwrInvalidError';
}
// 404
export class LwrUnresolvableError extends LwrError {
    name = 'LwrUnresolvableError';
    type; // eg: "bundle", "asset"
    constructor(message, type) {
        super(message);
        this.type = type;
    }
}
// 301, 302, 429, 503
export class LwrStatusError extends LwrError {
    name = 'LwrStatusError';
    status;
    headers; // for Location, Cache-Control, etc
    constructor(message, status, headers) {
        super(message);
        this.status = status;
        this.headers = headers;
    }
}
export class DiagnosticsError extends LwrError {
    constructor(message, diagnostics = []) {
        super(message);
        this.diagnostics = diagnostics;
        this.name = 'LwrDiagnosticsError';
    }
    diagnostics;
}
// fatal config validation issues
export class LwrConfigError extends DiagnosticsError {
    name = 'LwrConfigError';
}
//# sourceMappingURL=errors.js.map