var __defProp = Object.defineProperty;
var __markAsModule = (target) => __defProp(target, "__esModule", {value: true});
var __export = (target, all) => {
  for (var name in all)
    __defProp(target, name, {get: all[name], enumerable: true});
};

// packages/@lwrjs/diagnostics/src/descriptions/config.ts
__markAsModule(exports);
__export(exports, {
  config: () => config
});
var config = {
  INVALID_JSON: (invalidJsonError) => `Invalid JSON: ${invalidJsonError}`,
  INCORRECT_NODE_TYPE: (configProperty, expectedNodeType, actualNodeType) => `Incorrect node type for property "${configProperty}". Expected type: "${expectedNodeType}", got "${actualNodeType}"`,
  INVALID_EMPTY_NODE: (configProperty) => `Property "${configProperty}" must not be an empty object`,
  INVALID_PROPERTY: (configProperty, prop) => `Unexpected property "${prop}" in "${configProperty}" configuration`,
  NON_EMPTY_STRING: (configProperty, actualProp) => `Property "${configProperty}" must be a non-empty string, received ${actualProp}`,
  NON_EMPTY_ARRAY: (configProperty, actualProp) => `Property "${configProperty}" must be a non-empty array, received ${actualProp}`,
  INVALID_PORT: (configProperty, actualProp) => `Property "${configProperty}" must be a valid port number, received ${actualProp}`,
  INVALID_METHOD: (configProperty, actualProp) => `Property "${configProperty}" must be "get" or "post", received ${actualProp}`,
  INVALID_SERVER_TYPE: (configProperty, actualProp) => `Property "${configProperty}" must be one of ["express" | "koa" | "fs"] , received ${actualProp}`,
  INVALID_GENERATOR_CONFIG: (configProperty, actualProp) => `Property "${configProperty}" must be an object , received ${actualProp}`,
  INVALID_STATUS: (configProperty, actualProp) => `Property "${configProperty}" must be 404 or 500, received ${actualProp}`,
  INVALID_SPECIFIER: (configProperty, actualProp) => `Property "${configProperty}" must be a valid specifier, received ${actualProp}`,
  INVALID_PATH: (configProperty, actualProp) => `Property "${configProperty}" must be a URI path string which starts but does not end with a slash, received ${actualProp}`,
  INVALID_ORIGIN: (configProperty, actualProp) => `Property "${configProperty}" must be a full URI string with a scheme (eg: "https://site.com"), received ${actualProp}`,
  INVALID_FILE_PATTERN: (configProperty, actualProp) => `Property "${configProperty}" must use a valid regex but received ${actualProp === "" ? "empty string" : actualProp}`,
  INVALID_BASEPATH: (configProperty, actualProp) => `Property "${configProperty}" must be a URI base path string which starts with a slash, received ${actualProp}`,
  INVALID_SERVICE: (configProperty, actualProp) => `Property "${configProperty}" must be a valid service (a non-empty string or array with [non-empty string, any]), received ${actualProp}`,
  INVALID_ENVIRONMENT: (configProperty) => `Property "${configProperty}" must define a default environment`,
  MISSING_ONE_OF: (configProperty, childProps) => `A "${configProperty}" must contain at least one of [${childProps}]`,
  TOO_MANY: (configProperty, childProps) => `A "${configProperty}" must contain exactly one of [${childProps}]`,
  MISSING_REQUIRED: (configProperty, childProps) => `Property "${configProperty}" is missing required properties [${childProps}]`,
  DUPLICATE_IDS: (configProperty, dupeIds) => `Each "${configProperty}" must have a unique "id", found duplicates [${dupeIds}]`,
  COMPILE_LOCKER_SSR: () => 'If "locker.enabled: true" and any route sets "ssr: true", then "locker.clientOnly" must also be set to "true"',
  DUPLICATE_BUNDLE_CONFIG: (dupeIds) => `Found duplicate specifiers in BundleConfig: [${dupeIds}]`,
  DEFAULT_NOT_IN_LOCALES: (defaultLocale, locales) => `Property "i18n.defaultLocale" must be in the list of "i18n.locales": ${defaultLocale} [${locales}]`,
  FALLBACK_NOT_IN_LOCALES: (fallback, locales) => `Property "i18n.locales.fallback" must be in the list of "i18n.locales": ${fallback} [${locales}]`,
  SSR_WITHOUT_PRELOAD: (configProperty) => `A route cannot have preloadData disabled when ssr is enabled:": ${configProperty}`
};
