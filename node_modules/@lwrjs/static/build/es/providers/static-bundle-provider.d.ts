import type { AbstractModuleId, BundleDefinition, BundleProvider, ProviderContext, RuntimeEnvironment, RuntimeParams, SiteBundle, SiteMetadata } from '@lwrjs/types';
import { LRUCache } from 'lru-cache';
export default class StaticBundleProvider implements BundleProvider {
    name: string;
    codeCache: LRUCache<string, string, unknown> | undefined;
    siteRootDir: string;
    bundleConfig: import("@lwrjs/types").BundleConfig;
    i18n: import("@lwrjs/types").I18NConfig;
    siteMetadata: SiteMetadata;
    bundleCacheSize: number;
    constructor(config: {
        bundleCacheSize?: number;
    }, context: ProviderContext);
    bundle<BundleIdentifier extends AbstractModuleId, RE extends RuntimeEnvironment>(moduleId: BundleIdentifier, runtimeEnvironment: RE, runtimeParams: RuntimeParams): Promise<BundleDefinition | undefined>;
    private createBundleDefinition;
    getBundleMetadata({ moduleId, localeId, debug, ssr, }: {
        moduleId: Partial<AbstractModuleId>;
        localeId: string;
        debug: boolean;
        ssr: boolean;
    }): SiteBundle | undefined;
    /**
     * Takes a key from the site bundle metadata and creates an appropriate runtime BaseModuleReference to use in the LWR runtime.
     */
    private getModuleReference;
    getCodePromiser(bundleSourcePath: string, { specifier, version, locale, ssr, debug, }: {
        specifier: string;
        version?: string;
        locale: string;
        ssr: boolean;
        debug: boolean;
    }): () => Promise<string>;
    /**
     * Logs an error when a bundle fails to load and provides debugging metadata.
     *
     * This function logs details about the failed bundle load attempt, including the module ID,
     * locale, debug mode, and SSR status. It also attempts to retrieve additional metadata
     * about the site bundles and debug bundles associated with the module.
     *
     * @param {Partial<AbstractModuleId>} moduleId - The module identifier, which may include a namespace and name.
     * @param {string} localeId - The locale associated with the bundle.
     * @param {boolean} debug - Indicates whether debug mode is enabled.
     * @param {boolean} ssr - Indicates whether the bundle is for server-side rendering (SSR).
     */
    logBundleError(moduleId: Partial<AbstractModuleId>, localeId: string, debug: boolean, ssr: boolean): void;
}
//# sourceMappingURL=static-bundle-provider.d.ts.map