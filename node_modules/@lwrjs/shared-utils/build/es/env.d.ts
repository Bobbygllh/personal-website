import type { EnvironmentContext, FeatureFlags, Headers, RuntimeParams } from '@lwrjs/types';
export declare function getFeatureFlags(): FeatureFlags;
/**
 * This function is used to determine if the current environment is a lambda.
 *
 * @returns true if process is running in lambda environment
 */
export declare function isLambdaEnv(): boolean;
/**
 * This function is used to determine if lwr is running in the context of local development.
 *
 * @returns true if running in localdev mode
 */
export declare function isLocalDev(): boolean;
/**
 * This function is used to determine if lwr is running in the context of local preview.
 *
 * @returns true if running in preview mode
 */
export declare function isLocalPreview(): boolean;
/**
 * This function is used to determine if lwr is running with an authenticated context locally
 *
 * @returns true if local dev/preview authentication is enabled
 */
export declare function isLocalAuthEnabled(): boolean;
/**
 * Create a serializable context for user-land exposed environment variables
 */
export declare function buildEnvironmentContext(runtimeParams: RuntimeParams): EnvironmentContext;
export declare const TRUE_CLIENT_IP = "true-client-ip";
export declare const CORRELATION_ID = "x-correlation-id";
export declare const B3_TRACE_ID = "x-b3-traceid";
export declare const B3_SPAN_ID = "x-b3-spanid";
export declare const B3_PARENT_ID = "x-b3-parentspanid";
export declare const B3_SAMPLED = "x-b3-sampled";
export declare const MRT_REQUEST_CLASS = "x-mobify-request-class";
export declare const ROUTE_CORE_HEADER = "x-sfdc-route-core";
export declare const REQUEST_DEPTH_HEADER = "x-sfdc-request-depth";
export declare function parseRequestDepth(headers?: Headers, query?: Record<string, string>): number;
export declare function getTraceHeaders(runtimeParams: RuntimeParams, span?: {
    traceId: string;
    spanId: string;
    parentSpanId?: string;
}): HeadersInit;
//# sourceMappingURL=env.d.ts.map