LWR.define("example/lwcBP/v/0_0_1",["exports","lwc/v/8_22_4","example/sharedStyles/v/0_0_1"],function(c,e,v){"use strict";function r(g){return g&&typeof g=="object"&&"default"in g?g:{default:g}}var b=r(v),i=[b.default];const s=e.parseFragment`<div class="m-auto body-text page-height${0}"${2}><h1${3}>Coming Soon</h1></div>`;function p(g,t,k,y){const{st:T}=g;return[T(s,1)]}var $=e.registerTemplate(p);p.stylesheets=[],p.stylesheetToken="lwc-edaei799t2",p.legacyStylesheetToken="-lwcBP_lwcBP",i&&p.stylesheets.push.apply(p.stylesheets,i),e.freezeTemplate(p);class d extends e.LightningElement{constructor(...t){super(...t);this.data=`{
        subject: "Subject",
        description: "Description",
        status: "Status",
        origin: "Origin",
        name: "SuppliedName",
        phone: "SuppliedPhone",
        email: "SuppliedEmail"
}`}}e.registerDecorators(d,{fields:["data"]});const o=e.registerComponent(d,{tmpl:$,sel:"example-lwc-bp",apiVersion:66});c.default=o,Object.defineProperty(c,"__esModule",{value:!0})}),LWR.define("example/apexBP/v/0_0_1",["exports","lwc/v/8_22_4","example/sharedStyles/v/0_0_1","example/magicLink/v/0_0_1"],function(c,e,v,r){"use strict";function b(q){return q&&typeof q=="object"&&"default"in q?q:{default:q}}var i=b(v),s=b(r);function p(q,L,K){var ee=q?"["+q+"]":"";return".client-credentials"+ee+" {width: 80%}.integration-user"+ee+" {width: 90%}"}var $=[i.default,p];const d=e.parseFragment`<h1${3}>Apex Best Practices</h1>`,o=e.parseFragment`<p${3}>There are a lot of very good articles that hit on the basic tenants of Apex development in Salesforce. They all have similar best practices like &quot;don&#x27;t put a query in a for loop&quot;. I want to provide some more in depth best practices that expand on some of these items and touch a bit more on general programmatic best practices.</p>`,g=e.parseFragment`<h3${3}>Check if Object/variables are null before accessing to avoid Null Pointer exceptions</h3>`,t=e.parseFragment`<p${3}>Null pointer exceptions are thrown when trying to access/use an object reference or variable which has a null value or is not initialized. Often code that could potentially throw a NullPointerException error isn&#x27;t within try/catch blocks like DML statements, so the error will reach the user or roll back the process entirely. We need to check whether an object or variable is null before we run a method upon it (like get or toString etc. etc.) There are two ways we can do so, utilizing the safe navigation operator or a simple if statement if(object!= null). The preferred method would be the safe navigation operator as it allows for cleaner, more readable code. For example, instead of the following:</p>`,k=e.parseFragment`<img class="client-credentials${0}" src="public/assets/1apex.png" alt="client creds"${2}>`,y=e.parseFragment`<p${3}>We could rewrite it as below utilizing the safe navigation operator. Putting ? before the get method means that if the retrieveRecordTypesByDeveloperName() method returns null then running .get() won&#x27;t produce a null pointer exception. Without the safe navigation operator (or a if null check to ensure its defined) then a Null Pointer Exception would be thrown</p>`,T=e.parseFragment`<img class="client-credentials${0}" src="public/assets/2apex.png" alt="client creds"${2}>`,j=e.parseFragment`<p${3}>This is particularly effective in accessing multilevel maps like sampleMap. Instead of long or multiline if statement checks (ie. first screenshot x3) we can just write sampleMap?.getidVariable()?.getidVariable()?.get(idVariable). However if it is preferred to use code like the first screenshot, that is acceptable as well.</p>`,u=e.parseFragment`<h3${3}>Avoid Triple Looping</h3>`,x=e.parseFragment`<p${3}>For general performance we generally want to reduce the amount of for loops running in our code. If we can loop over a set of records once instead of twice during a codes execution that is preferable. However what we want to explicitly avoid is triple looping. This significantly eats up CPU time and causes our operations to take longer than they need to. An example of triple looping is the below:</p>`,B=e.parseFragment`<img class="client-credentials${0}" src="public/assets/3apex.png" alt="client creds"${2}>`,O=e.parseFragment`<h3${3}>Handle Potential Exceptions in Try/Catch blocks</h3>`,W=e.parseFragment`<p${3}>Correctly handling exceptions in Apex is essential, unhandled errors will roll back the code execution and make it more difficult to debug issues.</p>`,S=e.parseFragment`<ul${3}><li${3}>Correctly handling exceptions in Apex is essential, unhandled errors will roll back the code execution and make it more difficult to debug issues.</li><li${3}>Exception Class</li></ul>`,l=e.parseFragment`<strong${3}>DO</strong>`,h=e.parseFragment`<p${3}>Handle frequently errored processes (web callouts/ DML statements) in Try Catch blocks and log errors to the exception table. That way we don&#x27;t need to have users recreate errors live</p>`,I=e.parseFragment`<strong${3}>DO</strong>`,m=e.parseFragment`<p${3}>Stack multiple catch statements if you need to handle errors in different ways</p>`,N=e.parseFragment`<img class="client-credentials${0}" src="public/assets/4apex.png" alt="client creds"${2}>`,E=e.parseFragment`<br${3}>`,P=e.parseFragment`<strong${3}>DON&#x27;T</strong>`,D=e.parseFragment`<p${3}>Wrap entire large pieces of code into Try/Catch blocks and then catch it with only a generic exception. This will often suppress errors generated from code that is not functioning properly.</p>`,A=e.parseFragment`<strong${3}>DON&#x27;T</strong>`,z=e.parseFragment`<p${3}>Have an empty catch statement or a catch statement that just System.debugs the code. This will make debugging nearly impossible as we&#x27;re entirely suppressing errors</p>`,M=e.parseFragment`<img class="client-credentials${0}" src="public/assets/5apex.png" alt="client creds"${2}>`,w=e.parseFragment`<h3${3}>Don&#x27;t write code in Apex Triggers</h3>`,f=e.parseFragment`<p${3}>Writing code directly in triggers does not allow for the modularity we need to write effective maintainabe code. While this falls under the category of &quot;fundamentals&quot;, it is worth detailing here. By utilizing a Trigger handler we can determine in what order the code runs and maintain our system of organization.</p>`,Y=e.parseFragment`<img class="client-credentials${0}" src="public/assets/6apex.png" alt="client creds"${2}>`,C=e.parseFragment`<h3${3}>Use curly braces for if statements/For Loops</h3>`,F=e.parseFragment`<p${3}>An age old debate but there is a lot of code in the code base which does not utilize curly braces following if or for statements/loops. The argument for curly braces is it reduces potential mistakes or confusion from developers maintaining the codebase. No curly braces even caused a very notable Apple bug. Here is a screenshot from stackoverflow outlining the potential for confusion caused by no curly braces:</p>`,H=e.parseFragment`<img class="client-credentials${0}" src="public/assets/apex9.png" alt="client creds"${2}>`,V=e.parseFragment`<p${3}>this example from the codebase shows how reading mixed curly braces/no curly braces is confusing</p>`,R=e.parseFragment`<img class="client-credentials${0}" src="public/assets/7apex.png" alt="client creds"${2}>`,U=e.parseFragment`<br${3}>`,Q=e.parseFragment`<strong${3}>DO</strong>`,X=e.parseFragment`<p${3}>no ambiguity, easier to read</p>`,Z=e.parseFragment`<img class="client-credentials${0}" src="public/assets/8apex.png" alt="client creds"${2}>`,_=e.parseFragment`<h3${3}>Cover all testing scenarios with System.assert methods</h3>`,ne=e.parseFragment`<ul${3}><li${3}>The minimum requirement from Salesforce is that Test classes have 75% code coverage to be released into Production. However we want to ensure that our classes actually do what the are intended to do, not just that the code runs. So we need to ensure they test the code in 3 essential ways:</li><li${3}>Scenario: The business asks that if a user enters/modifies the Phone field on a Contact record that the entered value is formatted to (123) 456-7891 unless it is less or more than 9 numbers, in that situation it should not be formatted</li><ul${3}><li${3}>Positive Scenario: Test that the code does what you expect it to do. -ie. 1234567891 should be updated to (123) 456-7891</li><li${3}>Negative Scenario: Test that the code does not behave in a way we don&#x27;t want it to - ie. 123456 should stay as 123456, not be updated to (123) 456- (or something similar)</li><li${3}>Bulk Scenario: insert/update multiple records at once to ensure that the code performs as expected in bulk update/inserts - Insert a list of contacts with the Phone field filled in, check that each record is formatted as expected</li></ul><li${3}>To check that all these scenarios work as expected we need to utilize System.Assert. Every single test method you write should have some type of System.assert method in it</li></ul>`,ie={classMap:{"m-auto":!0,"body-text":!0},key:0},re={props:{link:"https://www.salesforceben.com/12-salesforce-apex-best-practices/",label:"Good Fundamental Article"},key:5};function G(q,L,K,ee){const{st:a,c:n,h:se}=q;return[se("div",ie,[a(d,2),a(o,4),n("example-magic-link",s.default,re),a(g,7),a(t,9),a(k,11),a(y,13),a(T,15),a(j,17),a(u,19),a(x,21),a(B,23),a(O,25),a(W,27),a(S,29),a(l,31),a(h,33),a(I,35),a(m,37),a(N,39),a(E,41),a(P,43),a(D,45),a(A,47),a(z,49),a(M,51),a(w,53),a(f,55),a(Y,57),a(C,59),a(F,61),a(H,63),a(V,65),a(R,67),a(U,69),a(Q,71),a(X,73),a(Z,75),a(_,77),a(ne,79)])]}var J=e.registerTemplate(G);G.stylesheets=[],G.stylesheetToken="lwc-24vgmja5mne",G.legacyStylesheetToken="example-apexBP_apexBP",$&&G.stylesheets.push.apply(G.stylesheets,$),e.freezeTemplate(G);class te extends e.LightningElement{constructor(...L){super(...L);this.data=`{
        subject: "Subject",
        description: "Description",
        status: "Status",
        origin: "Origin",
        name: "SuppliedName",
        phone: "SuppliedPhone",
        email: "SuppliedEmail"
}`}}e.registerDecorators(te,{fields:["data"]});const ae=e.registerComponent(te,{tmpl:J,sel:"example-apex-bp",apiVersion:66});c.default=ae,Object.defineProperty(c,"__esModule",{value:!0})}),LWR.define("example/blogs/v/0_0_1",["exports","lwc/v/8_22_4","example/sharedStyles/v/0_0_1","example/apexBP/v/0_0_1","example/lwcBP/v/0_0_1"],function(c,e,v,r,b){"use strict";function i(l){return l&&typeof l=="object"&&"default"in l?l:{default:l}}var s=i(v),p=i(r),$=i(b);function d(l,h,I){var m=l?"["+l+"]":"";return".font-inherit"+m+" {color: inherit;}"}var o=[s.default,d];const g=e.parseFragment`<h1${3}>Blogs</h1>`,t=e.parseFragment`<a class="font-inherit flex items-center p-med-top${0}"${"a0:data-item"} href="#"${2}><div class="flex-auto${0}"${2}><div${3}>${"t3"}</div><div class="text-sm${0}"${2}>${"t5"}</div></div></a>`,k={classMap:{"m-auto":!0,"body-text":!0,"page-height":!0},key:1},y={key:4},T={key:8},j={key:10};function u(l,h,I,m){const{st:N,k:E,b:P,d:D,sp:A,i:z,h:M,fr:w,c:f}=l,{_m0:Y,_m1:C}=m;return[h.isSelectionShown?w(0,[M("div",k,[N(g,3),M("div",y,z(h.blogObjs,function(F){return N(t,E(6,F.lwcReference),[A(0,{on:C||(m._m1={click:P(h.handleNavigate)}),attrs:{"data-item":F.lwcReference}},null),A(3,null,D(F.title)),A(5,null,D(F.date))])}))])],0):null,h.renderLwcs.apexBP?w(7,[f("example-apex-b-p",p.default,T)],0):null,h.renderLwcs.lwcBP?w(9,[f("example-lwc-b-p",$.default,j)],0):null]}var x=e.registerTemplate(u);u.stylesheets=[],u.stylesheetToken="lwc-7v429e70suo",u.legacyStylesheetToken="-blogs_blogs",o&&u.stylesheets.push.apply(u.stylesheets,o),e.freezeTemplate(u);const B=[{title:"Apex Best Practices",date:"October 2025",lwcReference:"apexBP"},{title:"Lightning Web Component Best Practices",date:"October 2025",lwcReference:"lwcBP"}],O={apexBP:!1,lwcBP:!1};class W extends e.LightningElement{constructor(...h){super(...h);this.blogObjs=B,this.isSelectionShown=!1,this.renderLwcs=JSON.parse(JSON.stringify(O)),this.handleHistoryChange=I=>{console.log("Browser history state changed via popstate event.")}}reset(){this.isSelectionShown=!0,this.renderLwcs=JSON.parse(JSON.stringify(O))}connectedCallback(){this.isSelectionShown=!0}handleNavigate(h){const I=h.currentTarget.dataset.item;this.renderLwcs[I]=!0,this.isSelectionShown=!1}}e.registerDecorators(W,{publicMethods:["reset"],track:{renderLwcs:1},fields:["blogObjs","isSelectionShown","handleHistoryChange"]});const S=e.registerComponent(W,{tmpl:x,sel:"-blogs",apiVersion:66});c.default=S,Object.defineProperty(c,"__esModule",{value:!0})}),LWR.define("example/lwcOssWebsite/v/0_0_1",["exports","example/sharedStyles/v/0_0_1","example/magicLink/v/0_0_1","lwc/v/8_22_4"],function(c,e,v,r){"use strict";function b(S){return S&&typeof S=="object"&&"default"in S?S:{default:S}}var i=b(e),s=b(v),p=[i.default];const $=r.parseFragment`<h1${3}>Website Build with LWC OSS and Github Pages</h1>`,d=r.parseFragment`<h2${3}>Why LWC OSS</h2>`,o=r.parseFragment`<p${3}>While investigating what framework I could build this site in, I came across Lightning Web Components Open Source. I had come across them a bit while reading release articles/updates from Salesforce but never had a use case. As I looked into React and other frameworks, I came back to LWC OSS as I thought it was a good opportunity to build something in a framework I was comfortable in and demonstrate my skillset with LWCs. While there are some expected and unexpected limitations, overall it was a good experience, though I can&#x27;t imagine there will be a use case I encounter where LWC OSS is the best option.</p>`,g=r.parseFragment`<h3${3}>Positives</h3>`,t=r.parseFragment`<ul${3}><li${3}>As I mentioned above, LWC OSS is LWC, so it a framework I was comfortable with and could problem solve quickly with</li><li${3}>Not battling the Lightning styling when trying to tweak styling was a nice change of pace</li></ul>`,k=r.parseFragment`<h3${3}>Negatives</h3>`,y=r.parseFragment`<ul${3}><li${3}>Lightning components (like lightning-input) and SLDS classes are not available</li><li${3}>The challenges with loading and working with 3rd party libararies still exists</li><li${3}>There is not a significant community using LWC OSS and the lack of support makes things challenging. </li><li${3}>Figuring out the changes necessary to get the site compatible with Github Pages was painful</li><li${3}>Everything needs to be built custom. There is likely some path towards getting a styling library like bootstrap but the lack of community resources on how exactly that would function made it a bit daunting</li></ul>`,T=r.parseFragment`<p${3}>So a few more items in the negative category than the positive category but I am happy with the result and</p>`,j={classMap:{"m-auto":!0,"body-text":!0},key:0},u={props:{link:"https://github.com/Bobbygllh/personal-website",label:"Github Repo for Website",picture:""},key:3};function x(S,l,h,I){const{st:m,c:N,h:E}=S;return[E("div",j,[m($,2),N("example-magic-link",s.default,u),m(d,5),m(o,7),m(g,9),m(t,11),m(k,13),m(y,15),m(T,17)])]}var B=r.registerTemplate(x);x.stylesheets=[],x.stylesheetToken="lwc-3dbigci4eob",x.legacyStylesheetToken="-lwcOssWebsite_lwcOssWebsite",p&&x.stylesheets.push.apply(x.stylesheets,p),r.freezeTemplate(x);class O extends r.LightningElement{}const W=r.registerComponent(O,{tmpl:B,sel:"example-lwc-oss-website",apiVersion:66});c.default=W,Object.defineProperty(c,"__esModule",{value:!0})}),LWR.define("example/caseApi/v/0_0_1",["exports","lwc/v/8_22_4","example/sharedStyles/v/0_0_1","example/magicLink/v/0_0_1"],function(c,e,v,r){"use strict";function b(L){return L&&typeof L=="object"&&"default"in L?L:{default:L}}var i=b(v),s=b(r);function p(L,K,ee){var a=L?"["+L+"]":"";return".client-credentials"+a+" {width: 80%}.integration-user"+a+" {width: 90%}"}var $=[i.default,p];const d=e.parseFragment`<h1${3}>Case Creation API Integration</h1>`,o=e.parseFragment`<div class="code-textarea p-med-top${0}"${2}><p${3}>Task: Your company would like to leverage Salesforce to respond to customer support cases and they would like you to create a custom API that will create a Case record in Salesforce. This API will be used in web, as well as in their Android and iOS applications. Expose a REST Resource class that can be used by engineering to support this use case.</p><ul${3}><li${3}>Origin can be either &quot;web&quot; or &quot;mobile&quot;</li><li${3}>Build a Client Credentials Authentication flow</li><li${3}>Status will be &quot;New&quot;</li><li${3}>The payload request you can expect is below:</li></ul><span${3}>${"t13"}</span></div>`,g=e.parseFragment`<h1${3}>Initial Thoughts</h1>`,t=e.parseFragment`<p${3}>The first consideration is if a custom API is necessary and whether we can we direct the engineering team to use the standard existing services sObject APIs <a href="https://developer.salesforce.com/docs/atlas.en-us.api_rest.meta/api_rest/resources_sobject_basic_info_post.htm"${3}> (LINK)</a>. This would allow the team to insert Cases without us needing to build them a custom api, which would save a good amount of team effort. Through the auth process and integration user we would be able to limit their access. The challenge is that the requirements of enforcing that the Origin is either &quot;web&quot; or &quot;mobile&quot; would prove challenging. We could enfore this in a validation rule, before save flow, apex etc. However we do not want to enfore this requirement every time a Case is created. One &quot;workaround&quot; is we could create a checkbox field and ask the engineering team to set it to true on insert. With this we could check the Origin conditions and when the checkbox isn&#x27;t set, we&#x27;d ignore it. However, that is bit of a janky workaround and for the purposes of this exercise we will assume that we want this as foolproof as possible and that that is not an option.</p>`,k=e.parseFragment`<h1${3}>What We Will Build</h1>`,y=e.parseFragment`<p${3}>This leaves us with the option of creating a custom REST resource for the engineering team to call. Our first and biggest consideration is security as we will be providing an external team with access to our system. So our goal will be to provide the bare minimum amount of access for the team to accomplish their goal of inserting a Case. The second consideration will be building a comprehensive stable endpoint that handles edge scenarios elegantly and gives the team calling the API the information they need to correct any issues with their request payload. A rough outline of the items we will need to implement are as follows:</p>`,T=e.parseFragment`<ul${3}><li${3}>An authentication flow</li><li${3}>A user</li><li${3}>an Apex class</li><li${3}>a easy way to test the API</li></ul>`,j=e.parseFragment`<h2${3}>Authentication Flow</h2>`,u=e.parseFragment`<p${3}>the task scope outlines using a Client Credentials flow. The gold standard for Oauth2.0 authentication flows is the JWT Bearer Flow, however sometimes the external system cannot support this flow, so a Client Credentials flow is the second most secure choice. Below is an outline of the flow:</p>`,x=e.parseFragment`<img class="client-credentials${0}" src="public/assets/Client-Credentials.png" alt="client creds"${2}>`,B=e.parseFragment`<br${3}>`,O=e.parseFragment`<p${3}>the basic structure is that the calling system will hold a Client Id and Client Secret that it will utilize the call the Salesforce. The system will pass back an auth token if the Client Id and Client Secret are valid. The calling system will then use that auth token to do an action, in this situation call an endpoint. On the Salesforce end we will need to create a Connected App, which will produce the Client Id and Client Secret for the external team.</p>`,W=e.parseFragment`<h3${3}>Connected App</h3>`,S=e.parseFragment`<p${3}>How we structure our connected app will be critical in keeping with our original goal of least access possible. The first step towards doing that will be correctly choosing the scope of the Connected App. For our given scenario, the best choice is the Manage user data via APIs. This will still allow Case creation but limit the external client to only accessing Salesforces APIs.</p>`,l=e.parseFragment`<img class="client-credentials${0}" src="public/assets/connected-app-settings.png" alt="client creds"${2}>`,h=e.parseFragment`<p${3}>However, our system might have multiple APIs and the standard sObject APIs are also quite powerful. So we will need a way to further reduce the access that the calling system will have. We can do this using an specific integration user that we will create. Any operation the external client does after authenticating to our Connected App will be done as this user.</p>`,I=e.parseFragment`<img class="integration-user${0}" src="public/assets/integration-user.png" alt="client creds"${2}>`,m=e.parseFragment`<h3${3}>Integration User</h3>`,N=e.parseFragment`<p${3}>When creating this user (or any user), we&#x27;ll need to consider the license and profile. Salesforce has fortunately created a license specifically for integration users named the &quot;Salesforce Integration&quot; license. This is a low cost alternative to a full license. The Profile options for this license are limited and for our use case (creating a record) the &quot;Minimum Access – API Only Integrations&quot; fits our scenario. This will not allow anything other than API access to the system. We will need to open up a few permissions and we can do that with the flexibility of Permission Sets. We can provide access to the fields that will be set upon insertion as well as give Read and Edit access to Case.</p>`,E=e.parseFragment`<img class="client-credentials${0}" src="public/assets/permission-set.png"${2}>`,P=e.parseFragment`<h2${3}>REST Endpoint</h2>`,D=e.parseFragment`<p${3}>Now that we have the authentication piece all set, we can move towards creating a custom REST endpoint for the external team to call. We will create an apex class with the Rest Resource annotation of @RestResource(urlMapping=&#x27;/CreateSupportCase&#x27;). This apex class will handle Post calls as this scenario is modifying/creating data. Some goals that we have for our code are as follows:</p>`,A=e.parseFragment`<ul${3}><li${3}>Enforce the outlined Request structure</li><li${3}>Handle any malformed requests</li><li${3}>Enfore an origin of &quot;web&quot; or &quot;mobile&quot;</li><li${3}>Give back clear error messaging to the calling system</li></ul>`,z=e.parseFragment`<p${3}>We can accomplish this with a few patterns. The first of which is our exception pattern. We create a custom exception within the class so that we can include specific information when we throw the exception, like the ResponseInfo class (more on that later)</p>`,M=e.parseFragment`<img class="client-credentials${0}" src="public/assets/custom-exception.png"${2}>`,w=e.parseFragment`<p${3}>We will wrap all of the code that will run during API execution context in a Try / Catch. In addition to catching our custom exception it allows us to handle unexpected exceptions but still format the response in the same way every time so the calling system knows what to expect.</p>`,f=e.parseFragment`<img class="client-credentials${0}" src="public/assets/try-catch.png"${2}>`,Y=e.parseFragment`<p${3}>This also allows us to effectively stop the execution from anywhere in the code by throwing our custom exception with the necessary information. When a structure like this is not implemented, it makes it very difficult when an issue is detected to stop the execution and return a response up the chain of methods. It typically leads to all code being written in one method as returning relevent info from a child method is challenging.</p>`,C=e.parseFragment`<p${3}>Within the try /catch, the catch statement identifies if it is our custom exception and if not, creates a custom exception with the information from the error so that our setErrorResponse() method knows what information will be present and can build our response.</p>`,F=e.parseFragment`<p${3}>The beauty of this pattern is in the ResponseInfo methods sitting near the top of the class.</p>`,H=e.parseFragment`<img class="client-credentials${0}" src="public/assets/response-info.png"${2}>`,V=e.parseFragment`<p${3}>These effectively become documentation for every possible response that we will return. These methods are clearly named and have a response code (ie. 201, 400 etc.), a string response code and an error message. This makes it very easy to add new ResponseInfos, reuse them and see what part of the code threw them.</p>`,R=e.parseFragment`<p${3}>An example usage is the check for the correct origin value. After parsing the response with our inner Request class, we&#x27;ll pass the Origin value to this method, which will check if it is valid. if it is not, it will throw a custom exception with a ResponseInfo object. The error message will be dynamic, including the value they attempted to pass in so they can easily understand what the expectation is vs. what they provided.</p>`,U=e.parseFragment`<img class="client-credentials${0}" src="public/assets/origin-check.png"${2}>`,Q=e.parseFragment`<h2${3}>Testing</h2>`,X=e.parseFragment`<p${3}>The first aspect of testing that we&#x27;ll need to complete is an Apex test class. The most critical piece that I often see missed in integration testing is testing as the Integration user (or a user who reflects all the permissions the integration user has). If the apex test class isn&#x27;t running in context as that integration user, it will run as the running executing the test class, who will likely have vastly different permissions. The rest of the tests are straightforward, we want to test positive scenarios as well as negative scenarios and ensure we are Asserting</p>`,Z=e.parseFragment`<img class="client-credentials${0}" src="public/assets/test-class.png"${2}>`,_=e.parseFragment`<p${3}>The next step is setting up some type of ability to manually call the API. In the <a href="https://github.com/Bobbygllh/CreateCaseAPI/blob/main/README.md"${3}>ReadME </a>I detail how to use a powerful VS Code tool called RestClient Extension to call the endpoint. Having an easy way to modify the Request and test the API allows for a quick way to recreate the issue if the calling team is running into a problem.</p>`,ne={classMap:{"m-auto":!0,"body-text":!0},key:0},ie={classMap:{"p-med-bottom":!0},key:3},re={props:{link:"https://github.com/Bobbygllh/CreateCaseAPI/",label:"Github Repo Link",picture:"background-image: url(https://bornsql.ca/wp-content/uploads/2022/03/Git-Logo-2Color.png);"},key:4},G={props:{link:"https://blog.beyondthecloud.dev/blog/salesforce-oauth-2-0-flows-integrate-in-the-right-way",label:"Source"},key:25};function J(L,K,ee,a){const{st:n,c:se,h:oe,d:le,sp:ce}=L;return[oe("div",ne,[n(d,2),oe("div",ie,[se("example-magic-link",s.default,re)]),n(o,6,[ce(13,null,le(K.data))]),n(g,8),n(t,10),n(k,12),n(y,14),n(T,16),n(j,18),n(u,20),n(x,22),n(B,24),se("example-magic-link",s.default,G),n(O,27),n(W,29),n(S,31),n(l,33),n(h,35),n(I,37),n(m,39),n(N,41),n(E,43),n(P,45),n(D,47),n(A,49),n(z,51),n(M,53),n(w,55),n(f,57),n(Y,59),n(C,61),n(F,63),n(H,65),n(V,67),n(R,69),n(U,71),n(Q,73),n(X,75),n(Z,77),n(_,79)])]}var te=e.registerTemplate(J);J.stylesheets=[],J.stylesheetToken="lwc-1n8ko1nd92k",J.legacyStylesheetToken="-caseApi_caseApi",$&&J.stylesheets.push.apply(J.stylesheets,$),e.freezeTemplate(J);class ae extends e.LightningElement{constructor(...K){super(...K);this.data=`{
        subject: "Subject",
        description: "Description",
        status: "Status",
        origin: "Origin",
        name: "SuppliedName",
        phone: "SuppliedPhone",
        email: "SuppliedEmail"
}`}}e.registerDecorators(ae,{fields:["data"]});const q=e.registerComponent(ae,{tmpl:te,sel:"-case-api",apiVersion:66});c.default=q,Object.defineProperty(c,"__esModule",{value:!0})}),LWR.define("example/projects/v/0_0_1",["exports","lwc/v/8_22_4","example/sharedStyles/v/0_0_1","example/caseApi/v/0_0_1","example/lwcOssWebsite/v/0_0_1"],function(c,e,v,r,b){"use strict";function i(l){return l&&typeof l=="object"&&"default"in l?l:{default:l}}var s=i(v),p=i(r),$=i(b);function d(l,h,I){var m=l?"["+l+"]":"";return".project-image"+m+" {width: 20%;}a"+m+" {color: inherit;}.project-item"+m+" {background: transparent;font-size: 1.1rem;width: 350px;max-width: 100%;padding: 0.5rem 0.875rem 0.875rem;border-radius: 6px;}.project-detail-item"+m+" {transition: .2s all ease-out;text-decoration: none;border-bottom: none !important;opacity: .6;}.project-item:hover"+m+" {background: rgba(79, 79, 79, 0.067);}a.item:hover"+m+" {opacity: 1;}"}var o=[s.default,d];const g=e.parseFragment`<h1${3}>Projects</h1>`,t=e.parseFragment`<a class="project-item project-detail-item relative flex items-center${0}"${"a0:data-item"} href="#"${2}><img class="project-image pr-5${0}"${"a1:src"}${2}><div class="flex-auto${0}"${2}><div class="text-normal${0}"${2}>${"t4"}</div><div class="desc text-sm opacity-50 font-normal${0}"${2}>${"t6"}</div></div></a>`,k={classMap:{"m-auto":!0,"body-text":!0,"page-height":!0},key:1},y={key:4},T={key:8},j={key:10};function u(l,h,I,m){const{st:N,k:E,b:P,d:D,sp:A,i:z,h:M,fr:w,c:f}=l,{_m0:Y,_m1:C}=m;return[h.isSelectionShown?w(0,[M("div",k,[N(g,3),M("div",y,z(h.projectObjs,function(F){return N(t,E(6,F.lwcReference),[A(0,{on:C||(m._m1={click:P(h.handleNavigate)}),attrs:{"data-item":F.lwcReference}},null),A(1,{attrs:{src:F.image}},null),A(4,null,D(F.title)),A(6,null,D(F.description))])}))])],0):null,h.renderLwcs.caseApi?w(7,[f("example-case-api",p.default,T)],0):null,h.renderLwcs.lwcOSS?w(9,[f("example-lwc-oss-website",$.default,j)],0):null]}var x=e.registerTemplate(u);u.stylesheets=[],u.stylesheetToken="lwc-vrkj4vlmso",u.legacyStylesheetToken="-projects_projects",o&&u.stylesheets.push.apply(u.stylesheets,o),e.freezeTemplate(u);const B=[{title:"Inbound API Integration",description:"This project is the creation of a end to end custom REST inbound api that inserts a Case",image:"public/assets/api-integration.webp",lwcReference:"caseApi"},{title:"Building a LWC OSS Website",description:"Walkthrough of building this personal website with Lightning Web Component OSS and Github Pages",image:"public/assets/lwc.png",lwcReference:"lwcOSS"}],O={caseApi:!1,lwcOSS:!1};class W extends e.LightningElement{constructor(...h){super(...h);this.projectObjs=B,this.isSelectionShown=!1,this.renderLwcs=JSON.parse(JSON.stringify(O))}reset(){this.isSelectionShown=!0,this.renderLwcs=JSON.parse(JSON.stringify(O))}connectedCallback(){this.isSelectionShown=!0}handleNavigate(h){const I=h.currentTarget.dataset.item;this.renderLwcs[I]=!0,this.isSelectionShown=!1}}e.registerDecorators(W,{publicMethods:["reset"],track:{renderLwcs:1},fields:["projectObjs","isSelectionShown"]});const S=e.registerComponent(W,{tmpl:x,sel:"-projects",apiVersion:66});c.default=S,Object.defineProperty(c,"__esModule",{value:!0})}),LWR.define("example/magicLink/v/0_0_1",["exports","lwc/v/8_22_4"],function(c,e){"use strict";function v(d,o,g){var t=d?"["+d+"]":"";return".markdown-magic-link"+t+" {display: inline-flex;align-items: center;background: #8882;transform: translateY(3px);line-height: 100%;color: var(--fg-light) !important;gap: .25rem;border-width: 0px !important;border-radius: .25rem;padding: .25rem .375rem;font-family: Roboto Condensed;transition-property: color, background-color, border-color, text-decoration-color, fill, stroke, opacity, box-shadow, transform, filter, backdrop-filter;transition-timing-function: cubic-bezier(.4, 0, .2, 1);transition-duration: .15s;}.markdown-magic-link:hover"+t+" {background: #8883;color: var(--fg) !important;}.markdown-magic-link-image"+t+" {display: inline-block;height: 1.1em;width: 1.1em;background-size: cover;background-repeat: no-repeat;background-position: center;border-radius: 2px;}a"+t+" {font-weight: inherit;text-decoration: none;border-bottom: 1px solid rgba(125, 125, 125, .3);transition: border .3s ease-in-out}a:hover"+t+" {border-bottom: 1px solid black;}"}var r=[v];const b=e.parseFragment`<a${"a0:href"} class="body-text p-left markdown-magic-link${0}" target="_blank"${2}><span class="markdown-magic-link-image${0}"${"s1"}${2}></span>${"t2"}</a>`;function i(d,o,g,t){const{d:k,sp:y,st:T}=d;return[T(b,1,[y(0,{attrs:{href:o.link}},null),y(1,{style:o.picture},null),y(2,null,k(o.label))])]}var s=e.registerTemplate(i);i.stylesheets=[],i.stylesheetToken="lwc-5cfd9l1d44f",i.legacyStylesheetToken="-magicLink_magicLink",r&&i.stylesheets.push.apply(i.stylesheets,r),e.freezeTemplate(i);class p extends e.LightningElement{constructor(...o){super(...o);this.link=void 0,this.picture=void 0,this.label=void 0}}e.registerDecorators(p,{publicProps:{link:{config:0},picture:{config:0},label:{config:0}}});const $=e.registerComponent(p,{tmpl:s,sel:"example-magic-link",apiVersion:66});c.default=$,Object.defineProperty(c,"__esModule",{value:!0})}),LWR.define("example/navigation/v/0_0_1",["exports","lwc/v/8_22_4"],function(c,e){"use strict";function v(d,o,g){var t=d?"["+d+"]":"";return".nav"+t+" {padding: 2rem;width: 100%;display: grid;grid-template-columns: auto max-content;box-sizing: border-box;}.nav"+t+" img"+t+" {margin-bottom: 0;}.nav"+t+" a"+t+" {cursor: pointer;text-decoration: none;color: inherit;transition: opacity 0.2s ease;opacity: 0.6;outline: none;font-size: 1.4em;}.nav"+t+" a:hover"+t+" {opacity: 1;text-decoration-color: inherit;}.nav"+t+" .right"+t+" {display: grid;grid-gap: 1.2rem;grid-auto-flow: column;justify-content: flex-end;}.nav"+t+" .left"+t+" {display: grid;grid-gap: 1.2rem;grid-auto-flow: column;padding-left: 6rem;}.nav"+t+" .right"+t+" > *"+t+" {margin: auto;}.github-image"+t+" {width: 9%;}.initials-image"+t+" {width: 15%;}"}var r=[v];const b=e.parseFragment`<header${3}><nav class="nav${0}"${2}><div class="left${0}"${2}><img class="initials-image${0}" src="public/assets/bg.svg" alt="logo"${2}></div><div class="right${0}"${2}><a href="#" title="Home" data-item="mainpage"${3}><span${3}>Home</span></a><a href="#" title="Projects" data-item="projects"${3}><span${3}>Projects</span></a><a href="#" title="Blog" data-item="blogs"${3}><span${3}>Blog</span></a><a href="https://github.com/bobbygllh" target="_blank" title="Github" class="lt-md:hidden${0}"${2}><img class="github-image${0}" src="public/assets/github-mark.png" alt="logo"${2}></a></div></nav></header>`;function i(d,o,g,t){const{b:k,sp:y,st:T}=d,{_m0:j,_m1:u,_m2:x}=t;return[T(b,1,[y(5,{on:j||(t._m0={click:k(o.handleNavItemClick)})},null),y(8,{on:u||(t._m1={click:k(o.handleNavItemClick)})},null),y(11,{on:x||(t._m2={click:k(o.handleNavItemClick)})},null)])]}var s=e.registerTemplate(i);i.stylesheets=[],i.stylesheetToken="lwc-5l9k039pvit",i.legacyStylesheetToken="example-navigation_navigation",r&&i.stylesheets.push.apply(i.stylesheets,r),e.freezeTemplate(i);class p extends e.LightningElement{handleNavItemClick(o){const g=o.currentTarget.dataset.item;o.preventDefault(),this.dispatchEvent(new CustomEvent("categorychange",{detail:g,bubbles:!0}))}}const $=e.registerComponent(p,{tmpl:s,sel:"-navigation",apiVersion:66});c.default=$,Object.defineProperty(c,"__esModule",{value:!0})}),LWR.define("example/sharedStyles/v/0_0_1",["exports"],function(c){"use strict";function e(r,b,i){var s=r?"["+r+"]":"";return".body-text"+s+" {font-size: 1.05rem;max-width: 45rem;line-height: 1.75;}.body-text"+s+" a"+s+" {font-weight: inherit;text-decoration: none;border-bottom: 1px solid rgba(125, 125, 125, .3);transition: border .3s ease-in-out}.body-text"+s+" a:hover"+s+" {border-bottom: 1px solid black;}.p-med-top"+s+" {padding-top: 1rem;}.p-med-bottom"+s+" {padding-bottom: 1rem;}.p-left"+s+" {margin-left: .25rem;}.p-left-large"+s+" {margin-left: 4rem;}.m-auto"+s+" {margin: auto;}.items-center"+s+" {align-items: center;}.flex"+s+" {display: flex;}.flex-auto"+s+" {flex: 1 1 auto;}.pt-2"+s+", .pt2"+s+" {padding-top: .5rem;}.pr-5"+s+" {padding-right: 1.25rem;}.op50"+s+" {opacity: .5;}.font-400"+s+" {font-weight: 400;}.text-sm"+s+" {font-size: .875rem;line-height: 1.25rem;}.code-textarea"+s+" {width: 100%;background-color: #433c3c;color: #dcdcdc;font-family: 'Fira Code', 'Consolas', 'Courier New', monospace;font-size: 14px;line-height: 1.5;padding: 16px;border: 1px solid #333;border-radius: 8px;resize: vertical;overflow: auto;box-shadow: 0 2px 8px rgba(0, 0, 0, 0.3);caret-color: #00ff99;outline: none;}.page-height"+s+" {height: 1000px;}"}var v=[e];c.default=v,Object.defineProperty(c,"__esModule",{value:!0})}),LWR.define("example/app/v/0_0_1",["exports","lwc/v/8_22_4","example/sharedStyles/v/0_0_1","example/navigation/v/0_0_1","example/magicLink/v/0_0_1","example/projects/v/0_0_1","example/blogs/v/0_0_1"],function(c,e,v,r,b,i,s){"use strict";function p(w){return w&&typeof w=="object"&&"default"in w?w:{default:w}}var $=p(v),d=p(r),o=p(b),g=p(i),t=p(s);function k(w,f,Y){var C=w?"["+w+"]":"";return".markdown-magic-link"+C+" {display: inline-flex;align-items: center;background: #8882;transform: translateY(3px);line-height: 100%;color: var(--fg-light) !important;gap: .25rem;border-width: 0px !important;border-radius: .25rem;padding: .25rem .375rem;font-family: Roboto Condensed;transition-property: color, background-color, border-color, text-decoration-color, fill, stroke, opacity, box-shadow, transform, filter, backdrop-filter;transition-timing-function: cubic-bezier(.4, 0, .2, 1);transition-duration: .15s;}.markdown-magic-link:hover"+C+" {background: #8883;color: var(--fg) !important;}.markdown-magic-link-image"+C+" {display: inline-block;height: 1.1em;width: 1.1em;background-size: cover;background-repeat: no-repeat;background-position: center;border-radius: 2px;}.about-me-image"+C+" {width: 40%}"}var y=[$.default,k];const T=e.parseFragment`<h1${3}>Introduction</h1>`,j=e.parseFragment`<p${3}>Hi! I&#x27;m Bobby Gallahue, a Technical Lead with 7 years of experience specializing in working on complex Salesforce systems. I am getting my Masters at Tufts University in Computer Science with a planned graduation date of fall 2027</p>`,u=e.parseFragment`<span${3}> and </span>`,x=e.parseFragment`<h3${3}>Background</h3>`,B=e.parseFragment`<p${3}>I first became interested in coding after a frustrating experience trying to find an eye doctor. Many of the websites I visited offered little transparency around accepted insurance plans or even the cost of a basic checkup. With no prior programming experience, I set out to see if I could create a better solution and began building simple prototype websites. What started as a small personal project quickly evolved into a genuine passion for software development and, ultimately, a career change. Today, I’m driven by the same motivation: to design applications that simplify everyday experiences, improve accessibility, and make meaningful, tangible impacts on people’s lives</p>`,O=e.parseFragment`<h3${3}>About Me</h3>`,W=e.parseFragment`<p${3}>Outside of work I am a passionate skier, surfer and mountain biker and you can typically find me somewhere in the White Mountains, Green Mountains or Seacoast of New Hampshire</p>`,S=e.parseFragment`<img class="about-me-image${0}" src="public/assets/skiing.jpg" alt="logo"${2}>`,l=e.parseFragment`<img class="about-me-image p-left-large${0}" src="public/assets/surfing.jpg" alt="logo"${2}>`,h={styleDecls:[["background-image","url(https://i.imgur.com/w074t77.png)",!1]],key:0},I={key:1},m={classMap:{"m-auto":!0,"body-text":!0},key:4},N={key:9},E={key:11};function P(w,f,Y,C){const{b:F,c:H,h:V,st:R,t:U,fr:Q}=w,{_m0:X,_m1:Z,_m2:_}=C;return[V("div",h,[V("header",I,[H("example-navigation",d.default,{key:2,on:X||(C._m0={categorychange:F(f.handleCategoryChange)})})]),f.navigationItems.mainpage.visible?Q(3,[V("div",m,[R(T,6),R(j,8),V("p",N,[U("I am currently working at "),H("example-magic-link",o.default,{props:{link:"https://www.ally.com/",label:"Ally Bank",picture:f.imageLinks.ally},key:10})]),V("p",E,[U("With previous stops at "),H("example-magic-link",o.default,{props:{link:"https://www.linkedin.com/company/cervello/",label:"Cervello",picture:f.imageLinks.cervello},key:12}),R(u,14),H("example-magic-link",o.default,{props:{link:"https://www.fiarch.com/",label:"Financial Architect Partners",picture:f.imageLinks.fiarch},key:15})]),R(x,17),R(B,19),R(O,21),R(W,23),R(S,25),R(l,27)])],0):null,f.navigationItems.projects.visible?Q(28,[H("example-projects",g.default,{key:29,on:Z||(C._m1={categorychange:F(f.handleCategoryChange)})})],0):null,f.navigationItems.blogs.visible?Q(30,[H("example-blogs",t.default,{key:31,on:_||(C._m2={categorychange:F(f.handleCategoryChange)})})],0):null])]}var D=e.registerTemplate(P);P.stylesheets=[],P.stylesheetToken="lwc-4us9q5akfb0",P.legacyStylesheetToken="-app_app",y&&P.stylesheets.push.apply(P.stylesheets,y),e.freezeTemplate(P);const A={mainpage:{visible:!1,child:!1},blogs:{visible:!1,child:!1},projects:{visible:!1,child:!1}};class z extends e.LightningElement{constructor(...f){super(...f);this.currentNavigationItem="mainpage",this.navigationItems=A}get imageLinks(){return{ally:"background-image: url(https://play-lh.googleusercontent.com/fWqKGby23VpE85tWtvLBfBAIvfch65lnfFF9NgFt-e_uQIoO_5lSOT6yipYNKkghcYs=w240-h480-rw);",cervello:"background-image: url(https://media.glassdoor.com/sql/718914/cervello-squarelogo-1442564055673.png);",fiarch:"background-image: url(https://media.licdn.com/dms/image/v2/D4E0BAQEaohaOrBW-CQ/company-logo_200_200/company-logo_200_200/0/1733775033094/financial_architects_partners_logo?e=1762992000&v=beta&t=TaP3E_mmX_WrQvChexbXNSJSm-y7iLWvwcOGpo-XH9E);"}}connectedCallback(){this.navigationItems[this.currentNavigationItem].visible=!0}handleCategoryChange(f){f&&(this.template.querySelector("example-projects")?.reset(),this.template.querySelector("example-blogs")?.reset(),this.navigationItems[this.currentNavigationItem].visible=!1,this.currentNavigationItem=f.detail,this.navigationItems[this.currentNavigationItem].visible=!0)}}e.registerDecorators(z,{track:{navigationItems:1},fields:["currentNavigationItem"]});const M=e.registerComponent(z,{tmpl:D,sel:"-app",apiVersion:66});c.default=M,Object.defineProperty(c,"__esModule",{value:!0})});
